name: Literature Quality Checks

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app/literature/**'
      - 'app/api/papers/**'
      - 'app/api/literature/**'
      - 'components/literature/**'
      - 'tests/literature/**'
      - 'scripts/literature/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'app/literature/**'
      - 'app/api/papers/**'
      - 'app/api/literature/**'
      - 'components/literature/**'
      - 'tests/literature/**'
      - 'scripts/literature/**'
  schedule:
    # Run daily at 6 AM UTC to check for broken links
    - cron: '0 6 * * *'

jobs:
  literature-tests:
    name: Literature Component Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run literature tests
      run: npm run test:literature

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: literature-test-results
        path: |
          test-results.json
          coverage/

  api-tests:
    name: API Endpoint Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: messai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_test
      run: |
        npx prisma migrate deploy
        npx prisma generate

    - name: Run API tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_test
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000
      run: npm run test -- tests/api/papers.test.ts

  database-integrity:
    name: Database Integrity Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[db-check]')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: messai_prod_copy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Restore database backup (if available)
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_prod_copy
      run: |
        # In production, this would restore from actual backup
        npx prisma migrate deploy
        npx prisma generate

    - name: Run database integrity check
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_prod_copy
      run: npm run db:integrity
      continue-on-error: true

    - name: Upload integrity report
      uses: actions/upload-artifact@v4
      with:
        name: database-integrity-report
        path: reports/

    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Database Integrity Issues Detected',
            body: `
            üö® **Database Integrity Check Failed**
            
            Critical issues were detected in the literature database during automated checks.
            
            **Details:**
            - Workflow: ${{ github.workflow }}
            - Run: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            
            **Next Steps:**
            1. Review the integrity report in the workflow artifacts
            2. Address any critical issues (duplicate DOIs, broken links, orphaned data)
            3. Run \`npm run db:integrity\` locally to reproduce
            
            **Auto-generated by GitHub Actions**
            `,
            labels: ['bug', 'database', 'literature', 'high-priority']
          })

  link-validation:
    name: External Link Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[link-check]')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: messai_link_check
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_link_check
      run: |
        npx prisma migrate deploy
        npx prisma generate

    - name: Validate external links (sample)
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messai_link_check
      run: npm run db:validate-links 25  # Check 25 links to avoid rate limiting
      continue-on-error: true

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: link-validation-report
        path: reports/

    - name: Comment on PR if high broken link rate
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `
            ‚ö†Ô∏è **High Broken Link Rate Detected**
            
            The external link validation found a high percentage of broken links in the literature database.
            
            **Recommended Actions:**
            - Review the validation report in the workflow artifacts
            - Update or remove broken external URLs
            - Verify DOI links are properly formatted
            
            This may impact user experience when accessing research papers.
            `
          })

  accessibility-check:
    name: Literature Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run accessibility tests
      run: npm run test -- tests/accessibility/accessibility.test.tsx

    - name: Upload accessibility report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report
        path: accessibility-report.html

  performance-check:
    name: Literature Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm run test -- tests/performance/performance.test.ts

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.json

  security-scan:
    name: Literature Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Scan for vulnerabilities in dependencies
      run: |
        npx audit-ci --config .audit-ci.json
      continue-on-error: true

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [literature-tests, api-tests, accessibility-check, performance-check]
    if: always()
    
    steps:
    - name: Check all job results
      run: |
        echo "Literature Tests: ${{ needs.literature-tests.result }}"
        echo "API Tests: ${{ needs.api-tests.result }}"
        echo "Accessibility: ${{ needs.accessibility-check.result }}"
        echo "Performance: ${{ needs.performance-check.result }}"
        
        if [[ "${{ needs.literature-tests.result }}" == "failure" || 
              "${{ needs.api-tests.result }}" == "failure" ]]; then
          echo "‚ùå Critical tests failed"
          exit 1
        else
          echo "‚úÖ All critical tests passed"
        fi