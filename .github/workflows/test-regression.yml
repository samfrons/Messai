name: Test & Regression Prevention

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  critical-tests:
    name: Critical Functionality Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run critical tests
      run: npm run test:critical
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: critical-test-results
        path: |
          test-results.json
          coverage/
        retention-days: 7

  regression-tests:
    name: Regression Prevention Tests
    runs-on: ubuntu-latest
    needs: critical-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run regression tests
      run: npm run test:regression
      
    - name: Run integration tests
      run: npm run test:integration

  build-test:
    name: Build & Deployment Test
    runs-on: ubuntu-latest
    needs: critical-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test production build
      run: npm run build
      
    - name: Test build output
      run: |
        # Check that essential files exist
        test -f .next/package.json
        test -d .next/static
        echo "‚úÖ Build output validation passed"

  comprehensive-tests:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        
    - name: Generate test report
      run: npm run test:all
      continue-on-error: true
      
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-test-results
        path: |
          test-report.json
          test-results.json
          coverage/
        retention-days: 30

  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for performance test
      run: npm run build
      
    - name: Run performance tests
      run: npm run test tests/performance/
      
    - name: Comment PR with performance results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          try {
            const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
            const performanceResults = results.testResults?.filter(r => r.name?.includes('performance')) || [];
            
            if (performanceResults.length > 0) {
              const comment = `## üöÄ Performance Test Results\n\n${performanceResults.map(r => 
                `- ${r.status === 'passed' ? '‚úÖ' : '‚ùå'} ${r.name}: ${r.duration}ms`
              ).join('\n')}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not parse performance results:', error.message);
          }

  security-check:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for outdated dependencies
      run: npm outdated || true

  accessibility-check:
    name: Accessibility Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run accessibility tests
      run: npm run test tests/accessibility/
      
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: test-results.json
        retention-days: 7