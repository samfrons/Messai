{"version":3,"sources":["../src/utils.ts","../src/Button.tsx","../src/Card.tsx","../src/Input.tsx","../src/3d/utils/loader.ts","../src/3d/utils/webgl.ts","../src/3d/utils/performance.ts","../src/3d/utils/renderer-pool.ts","../src/3d/models/earthen-pot.ts","../src/3d/models/cardboard.ts","../src/3d/models/mason-jar.ts","../src/3d/models/3d-printed.ts","../src/3d/models/wetland.ts","../src/3d/models/micro-chip.ts","../src/3d/models/isolinear-chip.ts","../src/3d/models/benchtop-bioreactor.ts","../src/3d/models/wastewater-treatment.ts","../src/3d/models/brewery-processing.ts","../src/3d/models/architectural-facade.ts","../src/3d/models/benthic-fuel-cell.ts","../src/3d/models/kitchen-sink.ts","../src/3d/models/index.ts","../src/3d/models/shared/materials.ts","../src/3d/MESSModel3D.tsx","../src/3d/MESSModel3DLite.tsx"],"names":["React","jsx","jsxs","error","useState","useRef","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,SAAS,MAAM,MAAA,EAAsB;AAC1C,EAAA,OAAO,OAAA,CAAQ,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7B;ACGO,IAAM,SAASA,MAAA,CAAM,UAAA;AAAA,EAC1B,CAAC,IAUE,GAAA,KAAQ;AAVV,IAAA,IAAA,EAAA,GAAA,EAAA,EACC;AAAA,MAAA,SAAA;AAAA,MACA,OAAA,GAAU,SAAA;AAAA,MACV,IAAA,GAAO,IAAA;AAAA,MACP,OAAA,GAAU,KAAA;AAAA,MACV,IAAA;AAAA,MACA,YAAA,GAAe,MAAA;AAAA,MACf,QAAA;AAAA,MACA;AAAA,KApBJ,GAYG,EAAA,EASI,KAAA,GAAA,SAAA,CATJ,EAAA,EASI;AAAA,MARH,WAAA;AAAA,MACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,cAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KAAA,CAAA;AAGA,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,OAAA,EAAS;AAAA,QACP,2BAAA;AAAA,QACA,sBAAA;AAAA,QACA,wBAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,SAAA,EAAW;AAAA,QACT,2BAAA;AAAA,QACA,kCAAA;AAAA,QACA,6CAAA;AAAA,QACA,yCAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,KAAA,EAAO;AAAA,QACL,kCAAA;AAAA,QACA,0CAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,MAAA,EAAQ;AAAA,QACN,8CAAA;AAAA,QACA,wCAAA;AAAA,QACA;AAAA;AACF,KACF;AAEA,IAAA,MAAM,KAAA,GAAQ;AAAA,MACZ,EAAA,EAAI,qBAAA;AAAA,MACJ,EAAA,EAAI,qBAAA;AAAA,MACJ,EAAA,EAAI;AAAA,KACN;AAEA,IAAA,uBACE,IAAA;AAAA,MAAC,QAAA;AAAA,MAAA,aAAA,CAAA,cAAA,CAAA;AAAA,QACC,GAAA;AAAA,QACA,SAAA,EAAW,EAAA;AAAA;AAAA,UAET,gEAAA;AAAA,UACA,6BAAA;AAAA,UACA,qDAAA;AAAA,UACA,iDAAA;AAAA;AAAA,UAGA,SAAS,OAAO,CAAA;AAAA;AAAA,UAGhB,MAAM,IAAI,CAAA;AAAA;AAAA,UAGV,OAAA,IAAW,sBAAA;AAAA,UAEX;AAAA,SACF;AAAA,QACA,UAAU,QAAA,IAAY;AAAA,OAAA,EAClB,KAAA,CAAA,EArBL;AAAA,QAuBE,QAAA,EAAA;AAAA,UAAA,OAAA,oBACC,GAAA,CAAC,MAAA,EAAA,EAAK,SAAA,EAAU,mDAAA,EACd,QAAA,kBAAA,IAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cACC,SAAA,EAAU,sBAAA;AAAA,cACV,KAAA,EAAM,4BAAA;AAAA,cACN,IAAA,EAAK,MAAA;AAAA,cACL,OAAA,EAAQ,WAAA;AAAA,cAER,QAAA,EAAA;AAAA,gCAAA,GAAA;AAAA,kBAAC,QAAA;AAAA,kBAAA;AAAA,oBACC,SAAA,EAAU,YAAA;AAAA,oBACV,EAAA,EAAG,IAAA;AAAA,oBACH,EAAA,EAAG,IAAA;AAAA,oBACH,CAAA,EAAE,IAAA;AAAA,oBACF,MAAA,EAAO,cAAA;AAAA,oBACP,WAAA,EAAY;AAAA;AAAA,iBACd;AAAA,gCACA,GAAA;AAAA,kBAAC,MAAA;AAAA,kBAAA;AAAA,oBACC,SAAA,EAAU,YAAA;AAAA,oBACV,IAAA,EAAK,cAAA;AAAA,oBACL,CAAA,EAAE;AAAA;AAAA;AACJ;AAAA;AAAA,WACF,EACF,CAAA;AAAA,0BAGF,IAAA,CAAC,UAAK,SAAA,EAAW,EAAA;AAAA,YACf,0BAAA;AAAA,YACA,OAAA,IAAW;AAAA,WACb,EACG,QAAA,EAAA;AAAA,YAAA,IAAA,IAAQ,iBAAiB,MAAA,oBACxB,GAAA,CAAC,MAAA,EAAA,EAAK,SAAA,EAAU,QAAQ,QAAA,EAAA,IAAA,EAAK,CAAA;AAAA,YAE9B,QAAA;AAAA,YACA,QAAQ,YAAA,KAAiB,OAAA,wBACvB,MAAA,EAAA,EAAK,SAAA,EAAU,QAAQ,QAAA,EAAA,IAAA,EAAK;AAAA,WAAA,EAEjC;AAAA;AAAA,OAAA;AAAA,KACF;AAAA,EAEJ;AACF;AAEA,MAAA,CAAO,WAAA,GAAc,QAAA;ACjHd,IAAM,OAAOA,MAAAA,CAAM,UAAA;AAAA,EACxB,CAAC,IAAwE,GAAA,KAAQ;AAAhF,IAAA,IAAA,EAAA,GAAA,EAAA,EAAE,EAAA,SAAA,EAAW,OAAA,GAAU,SAAA,EAAW,OAAA,GAAU,IAAA,EAAM,QAAA,EATrD,GASG,EAAA,EAA+D,KAAA,GAAA,SAAA,CAA/D,EAAA,EAA+D,CAA7D,WAAA,EAAW,WAAqB,SAAA,EAAgB,UAAA,CAAA,CAAA;AACjD,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,OAAA,EAAS;AAAA,QACP,2BAAA;AAAA,QACA,6CAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,6BAAA;AAAA,QACA,6CAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,KAAA,EAAO;AAAA,QACL,2BAAA;AAAA,QACA,6CAAA;AAAA,QACA,2BAAA;AAAA,QACA,gCAAA;AAAA,QACA;AAAA;AACF,KACF;AAEA,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,IAAA,EAAM,EAAA;AAAA,MACN,EAAA,EAAI,KAAA;AAAA,MACJ,EAAA,EAAI,KAAA;AAAA,MACJ,EAAA,EAAI;AAAA,KACN;AAEA,IAAA,uBACEC,GAAAA;AAAA,MAAC,KAAA;AAAA,MAAA,aAAA,CAAA,cAAA,CAAA;AAAA,QACC,GAAA;AAAA,QACA,SAAA,EAAW,EAAA;AAAA,UACT,YAAA;AAAA,UACA,SAAS,OAAO,CAAA;AAAA,UAChB,SAAS,OAAO,CAAA;AAAA,UAChB;AAAA;AACF,OAAA,EACI,KAAA,CAAA,EARL;AAAA,QAUE;AAAA,OAAA;AAAA,KACH;AAAA,EAEJ;AACF;AAEA,IAAA,CAAK,WAAA,GAAc,MAAA;AAGZ,IAAM,UAAA,GAAaD,MAAAA,CAAM,UAAA,CAG9B,CAAC,IAAyB,GAAA,KAAK;AAA9B,EAAA,IAAA,EAAA,GAAA,EAAA,EAAE,EAAA,SAAA,EA5DL,GA4DG,EAAA,EAAgB,KAAA,GAAA,SAAA,CAAhB,IAAgB,CAAd,WAAA,CAAA,CAAA;AACH,EAAA,uBAAAC,GAAAA;AAAA,IAAC,KAAA;AAAA,IAAA,cAAA,CAAA;AAAA,MACC,GAAA;AAAA,MACA,SAAA,EAAW,EAAA,CAAG,yDAAA,EAA2D,SAAS;AAAA,KAAA,EAC9E,KAAA;AAAA,GACN;AAAA,CACD;AACD,UAAA,CAAW,WAAA,GAAc,YAAA;AAElB,IAAM,SAAA,GAAYD,MAAAA,CAAM,UAAA,CAG7B,CAAC,IAAyB,GAAA,KAAK;AAA9B,EAAA,IAAA,EAAA,GAAA,EAAA,EAAE,EAAA,SAAA,EAxEL,GAwEG,EAAA,EAAgB,KAAA,GAAA,SAAA,CAAhB,IAAgB,CAAd,WAAA,CAAA,CAAA;AACH,EAAA,uBAAAC,GAAAA;AAAA,IAAC,IAAA;AAAA,IAAA,cAAA,CAAA;AAAA,MACC,GAAA;AAAA,MACA,SAAA,EAAW,EAAA,CAAG,wDAAA,EAA0D,SAAS;AAAA,KAAA,EAC7E,KAAA;AAAA,GACN;AAAA,CACD;AACD,SAAA,CAAU,WAAA,GAAc,WAAA;AAEjB,IAAM,WAAA,GAAcD,MAAAA,CAAM,UAAA,CAG/B,CAAC,IAAyB,GAAA,KAAK;AAA9B,EAAA,IAAA,EAAA,GAAA,EAAA,EAAE,EAAA,SAAA,EApFL,GAoFG,EAAA,EAAgB,KAAA,GAAA,SAAA,CAAhB,IAAgB,CAAd,WAAA,CAAA,CAAA;AACH,EAAA,uBAAAC,GAAAA,CAAC,wBAAI,GAAA,EAAU,SAAA,EAAW,GAAG,kCAAA,EAAoC,SAAS,KAAO,KAAA,CAAO,CAAA;AAAA,CACzF;AACD,WAAA,CAAY,WAAA,GAAc,aAAA;AC5EnB,IAAM,QAAQD,MAAAA,CAAM,UAAA;AAAA,EACzB,CAAC,IAA0E,GAAA,KAAQ;AAAlF,IAAA,IAAA,EAAA,GAAA,EAAA,EAAE,aAAW,KAAA,EAAO,KAAA,EAAO,IAAA,EAAM,IAAA,EAAM,eAAe,MAAA,EAZzD,GAYG,EAAA,EAAiE,KAAA,GAAA,SAAA,CAAjE,IAAiE,CAA/D,WAAA,EAAW,OAAA,EAAO,OAAA,EAAO,QAAM,MAAA,EAAM,cAAA,CAAA,CAAA;AACtC,IAAA,uBACEE,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,QAAA,EACZ,QAAA,EAAA;AAAA,MAAA,KAAA,oBACCD,GAAAA,CAAC,OAAA,EAAA,EAAM,SAAA,EAAU,mEACd,QAAA,EAAA,KAAA,EACH,CAAA;AAAA,sBAGFC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,UAAA,EACZ,QAAA,EAAA;AAAA,QAAA,IAAA,IAAQ,YAAA,KAAiB,MAAA,oBACxBD,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,sEAAA,EACb,QAAA,kBAAAA,GAAAA,CAAC,MAAA,EAAA,EAAK,SAAA,EAAU,6CAAA,EACb,gBACH,CAAA,EACF,CAAA;AAAA,wBAGFA,GAAAA;AAAA,UAAC,OAAA;AAAA,UAAA,cAAA,CAAA;AAAA,YACC,GAAA;AAAA,YACA,SAAA,EAAW,EAAA;AAAA;AAAA,cAET,0EAAA;AAAA,cACA,2BAAA;AAAA,cACA,mBAAA;AAAA,cACA,0DAAA;AAAA,cACA,+BAAA;AAAA,cACA,yBAAA;AAAA,cACA,gCAAA;AAAA;AAAA,cAGA,CAAC,KAAA,IAAS;AAAA,gBACR,kCAAA;AAAA,gBACA;AAAA,eACF;AAAA;AAAA,cAGA,KAAA,IAAS;AAAA,gBACP,gCAAA;AAAA,gBACA;AAAA,eACF;AAAA;AAAA,cAGA,IAAA,IAAQ,iBAAiB,MAAA,IAAU,OAAA;AAAA,cACnC,IAAA,IAAQ,iBAAiB,OAAA,IAAW,OAAA;AAAA,cACpC,CAAC,IAAA,IAAQ,MAAA;AAAA,cAET;AAAA,aACF;AAAA,YACA,cAAA,EAAc,CAAC,CAAC,KAAA;AAAA,YAChB,kBAAA,EAAkB,KAAA,GAAQ,eAAA,GAAkB,IAAA,GAAO,cAAA,GAAiB;AAAA,WAAA,EAChE,KAAA;AAAA,SACN;AAAA,QAEC,IAAA,IAAQ,YAAA,KAAiB,OAAA,oBACxBA,IAAC,KAAA,EAAA,EAAI,SAAA,EAAU,uEAAA,EACb,QAAA,kBAAAA,GAAAA,CAAC,MAAA,EAAA,EAAK,SAAA,EAAU,6CAAA,EACb,gBACH,CAAA,EACF;AAAA,OAAA,EAEJ,CAAA;AAAA,MAEC,KAAA,oBACCA,GAAAA,CAAC,GAAA,EAAA,EAAE,WAAU,6CAAA,EAA8C,EAAA,EAAG,iBAC3D,QAAA,EAAA,KAAA,EACH,CAAA;AAAA,MAGD,IAAA,IAAQ,CAAC,KAAA,oBACRA,GAAAA,CAAC,OAAE,SAAA,EAAU,+CAAA,EAAgD,EAAA,EAAG,cAAA,EAC7D,QAAA,EAAA,IAAA,EACH;AAAA,KAAA,EAEJ,CAAA;AAAA,EAEJ;AACF;AAEA,KAAA,CAAM,WAAA,GAAc,OAAA;AASb,IAAM,WAAWD,MAAAA,CAAM,UAAA;AAAA,EAC5B,CAAC,IAA6C,GAAA,KAAQ;AAArD,IAAA,IAAA,EAAA,GAAA,EAAA,EAAE,EAAA,SAAA,EAAW,KAAA,EAAO,KAAA,EAAO,IAAA,EArG9B,GAqGG,EAAA,EAAoC,KAAA,GAAA,SAAA,CAApC,EAAA,EAAoC,CAAlC,WAAA,EAAW,OAAA,EAAO,OAAA,EAAO,MAAA,CAAA,CAAA;AAC1B,IAAA,uBACEE,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,QAAA,EACZ,QAAA,EAAA;AAAA,MAAA,KAAA,oBACCD,GAAAA,CAAC,OAAA,EAAA,EAAM,SAAA,EAAU,mEACd,QAAA,EAAA,KAAA,EACH,CAAA;AAAA,sBAGFA,GAAAA;AAAA,QAAC,UAAA;AAAA,QAAA,cAAA,CAAA;AAAA,UACC,GAAA;AAAA,UACA,SAAA,EAAW,EAAA;AAAA;AAAA,YAET,8CAAA;AAAA,YACA,kCAAA;AAAA,YACA,2BAAA;AAAA,YACA,mBAAA;AAAA,YACA,0DAAA;AAAA,YACA,+BAAA;AAAA,YACA,yBAAA;AAAA,YACA,gCAAA;AAAA,YACA,uBAAA;AAAA;AAAA,YAGA,CAAC,KAAA,IAAS;AAAA,cACR,kCAAA;AAAA,cACA;AAAA,aACF;AAAA;AAAA,YAGA,KAAA,IAAS;AAAA,cACP,gCAAA;AAAA,cACA;AAAA,aACF;AAAA,YAEA;AAAA,WACF;AAAA,UACA,cAAA,EAAc,CAAC,CAAC,KAAA;AAAA,UAChB,kBAAA,EAAkB,KAAA,GAAQ,eAAA,GAAkB,IAAA,GAAO,cAAA,GAAiB;AAAA,SAAA,EAChE,KAAA;AAAA,OACN;AAAA,MAEC,KAAA,oBACCA,GAAAA,CAAC,GAAA,EAAA,EAAE,WAAU,6CAAA,EAA8C,EAAA,EAAG,iBAC3D,QAAA,EAAA,KAAA,EACH,CAAA;AAAA,MAGD,IAAA,IAAQ,CAAC,KAAA,oBACRA,GAAAA,CAAC,OAAE,SAAA,EAAU,+CAAA,EAAgD,EAAA,EAAG,cAAA,EAC7D,QAAA,EAAA,IAAA,EACH;AAAA,KAAA,EAEJ,CAAA;AAAA,EAEJ;AACF;AAEA,QAAA,CAAS,WAAA,GAAc,UAAA;;;AC3JvB,IAAI,WAAA,GAAmB,IAAA;AACvB,IAAI,WAAA,GAAmC,IAAA;AAKvC,eAAsB,SAAA,GAA0B;AAE9C,EAAA,IAAI,WAAA,EAAa;AACf,IAAA,OAAO,WAAA;AAAA,EACT;AAGA,EAAA,IAAI,WAAA,EAAa;AACf,IAAA,OAAO,WAAA;AAAA,EACT;AAEA,EAAA,WAAA,GAAc,IAAI,OAAA,CAAQ,OAAO,OAAA,EAAS,MAAA,KAAW;AACnD,IAAA,IAAI;AAEF,MAAA,WAAA,GAAc,MAAM,OAAO,OAAO,CAAA;AAClC,MAAA,OAAA,CAAQ,WAAW,CAAA;AAAA,IACrB,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,IAAA,CAAK,0DAA0D,KAAK,CAAA;AAG5E,MAAA,IAAI;AACF,QAAA,MAAM,gBAAA,EAAiB;AACvB,QAAA,WAAA,GAAe,MAAA,CAAe,KAAA;AAC9B,QAAA,IAAI,CAAC,WAAA,EAAa;AAChB,UAAA,MAAM,IAAI,MAAM,kCAAkC,CAAA;AAAA,QACpD;AACA,QAAA,OAAA,CAAQ,WAAW,CAAA;AAAA,MACrB,SAAS,QAAA,EAAU;AACjB,QAAA,MAAA,CAAO,QAAQ,CAAA;AAAA,MACjB;AAAA,IACF;AAAA,EACF,CAAC,CAAA;AAED,EAAA,OAAO,WAAA;AACT;AAKA,eAAe,gBAAA,GAAkC;AAC/C,EAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAA,KAAW;AAEtC,IAAA,IAAK,OAAe,KAAA,EAAO;AACzB,MAAA,OAAA,EAAQ;AACR,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,IAAA,MAAA,CAAO,GAAA,GAAM,oDAAA;AACb,IAAA,MAAA,CAAO,KAAA,GAAQ,IAAA;AAEf,IAAA,MAAA,CAAO,SAAS,MAAM;AACpB,MAAA,IAAI,CAAE,OAAe,KAAA,EAAO;AAC1B,QAAA,MAAA,CAAO,IAAI,KAAA,CAAM,6CAA6C,CAAC,CAAA;AAAA,MACjE,CAAA,MAAO;AACL,QAAA,OAAA,EAAQ;AAAA,MACV;AAAA,IACF,CAAA;AAEA,IAAA,MAAA,CAAO,UAAU,MAAM;AACrB,MAAA,MAAA,CAAO,IAAI,KAAA,CAAM,kCAAkC,CAAC,CAAA;AAAA,IACtD,CAAA;AAEA,IAAA,QAAA,CAAS,IAAA,CAAK,YAAY,MAAM,CAAA;AAAA,EAClC,CAAC,CAAA;AACH;AAKA,eAAsB,kBAAkB,KAAA,EAA0B;AAChE,EAAA,IAAI;AAEF,IAAA,MAAM,EAAE,aAAA,EAAc,GAAI,MAAM,OAAO,8CAA8C,CAAA;AACrF,IAAA,OAAO,aAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,IAAA,CAAK,0CAA0C,KAAK,CAAA;AAI5D,IAAA,OAAO,yBAAyB,KAAK,CAAA;AAAA,EACvC;AACF;AAKA,SAAS,yBAAyB,KAAA,EAAY;AAC5C,EAAA,OAAO,MAAM,kBAAA,CAAmB;AAAA,IAkB9B,WAAA,CAAY,QAAa,UAAA,EAAyB;AAflD,MAAA,IAAA,CAAA,OAAA,GAAU,IAAA;AACV,MAAA,IAAA,CAAA,aAAA,GAAgB,IAAA;AAChB,MAAA,IAAA,CAAA,aAAA,GAAgB,IAAA;AAChB,MAAA,IAAA,CAAA,UAAA,GAAa,IAAA;AACb,MAAA,IAAA,CAAA,YAAA,GAAe,IAAA;AACf,MAAA,IAAA,CAAA,SAAA,GAAY,IAAA;AAEZ,MAAA,IAAA,CAAQ,SAAA,GAAY,IAAI,KAAA,CAAM,SAAA,EAAU;AACxC,MAAA,IAAA,CAAQ,cAAA,GAAiB,IAAI,KAAA,CAAM,SAAA,EAAU;AAC7C,MAAA,IAAA,CAAQ,KAAA,GAAQ,CAAA;AAChB,MAAA,IAAA,CAAQ,SAAA,GAAY,IAAI,KAAA,CAAM,OAAA,EAAQ;AACtC,MAAA,IAAA,CAAQ,WAAA,GAAc,IAAI,KAAA,CAAM,OAAA,EAAQ;AACxC,MAAA,IAAA,CAAQ,SAAA,GAAY,IAAI,KAAA,CAAM,OAAA,EAAQ;AACtC,MAAA,IAAA,CAAQ,WAAA,GAAc,IAAI,KAAA,CAAM,OAAA,EAAQ;AAGtC,MAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,MAAA,IAAA,CAAK,UAAA,GAAa,UAAA;AAElB,MAAA,IAAA,CAAK,WAAW,gBAAA,CAAiB,WAAA,EAAa,KAAK,WAAA,CAAY,IAAA,CAAK,IAAI,CAAC,CAAA;AACzE,MAAA,IAAA,CAAK,WAAW,gBAAA,CAAiB,OAAA,EAAS,KAAK,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC,CAAA;AACtE,MAAA,IAAA,CAAK,WAAW,gBAAA,CAAiB,YAAA,EAAc,KAAK,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC,CAAA;AAC3E,MAAA,IAAA,CAAK,WAAW,gBAAA,CAAiB,WAAA,EAAa,KAAK,WAAA,CAAY,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA,IAC3E;AAAA,IAEA,MAAA,GAAS;AACP,MAAA,MAAM,QAAA,GAAW,KAAK,MAAA,CAAO,QAAA;AAG7B,MAAA,IAAA,CAAK,SAAA,CAAU,eAAe,QAAQ,CAAA;AACtC,MAAA,IAAA,CAAK,SAAA,CAAU,KAAA,IAAS,IAAA,CAAK,cAAA,CAAe,KAAA;AAC5C,MAAA,IAAA,CAAK,SAAA,CAAU,GAAA,IAAO,IAAA,CAAK,cAAA,CAAe,GAAA;AAG1C,MAAA,IAAA,CAAK,SAAA,CAAU,GAAA,GAAM,IAAA,CAAK,GAAA,CAAI,GAAA,EAAK,IAAA,CAAK,GAAA,CAAI,IAAA,CAAK,EAAA,GAAK,GAAA,EAAK,IAAA,CAAK,SAAA,CAAU,GAAG,CAAC,CAAA;AAE9E,MAAA,IAAA,CAAK,SAAA,CAAU,UAAU,IAAA,CAAK,KAAA;AAC9B,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,GAAS,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,IAAA,CAAK,GAAA,CAAI,EAAA,EAAI,IAAA,CAAK,SAAA,CAAU,MAAM,CAAC,CAAA;AAEvE,MAAA,QAAA,CAAS,gBAAA,CAAiB,KAAK,SAAS,CAAA;AACxC,MAAA,QAAA,CAAS,GAAA,CAAI,KAAK,SAAS,CAAA;AAE3B,MAAA,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAG1B,MAAA,IAAI,KAAK,aAAA,EAAe;AACtB,QAAA,IAAA,CAAK,cAAA,CAAe,KAAA,IAAU,CAAA,GAAI,IAAA,CAAK,aAAA;AACvC,QAAA,IAAA,CAAK,cAAA,CAAe,GAAA,IAAQ,CAAA,GAAI,IAAA,CAAK,aAAA;AAAA,MACvC,CAAA,MAAO;AACL,QAAA,IAAA,CAAK,cAAA,CAAe,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,MACjC;AAEA,MAAA,IAAA,CAAK,KAAA,GAAQ,CAAA;AACb,MAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAC5B;AAAA,IAEQ,YAAY,KAAA,EAAmB;AACrC,MAAA,IAAI,CAAC,IAAA,CAAK,OAAA,IAAW,CAAC,KAAK,YAAA,EAAc;AAEzC,MAAA,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,OAAA,EAAS,MAAM,OAAO,CAAA;AAEjD,MAAA,QAAA,CAAS,iBAAiB,WAAA,EAAa,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,IAAI,CAAC,CAAA;AAClE,MAAA,QAAA,CAAS,iBAAiB,SAAA,EAAW,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA,IAChE;AAAA,IAEQ,YAAY,KAAA,EAAmB;AACrC,MAAA,IAAI,CAAC,IAAA,CAAK,OAAA,IAAW,CAAC,KAAK,YAAA,EAAc;AAEzC,MAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,KAAA,CAAM,OAAA,EAAS,MAAM,OAAO,CAAA;AAC/C,MAAA,IAAA,CAAK,WAAA,CAAY,UAAA,CAAW,IAAA,CAAK,SAAA,EAAW,KAAK,WAAW,CAAA;AAE5D,MAAA,MAAM,UAAU,IAAA,CAAK,UAAA;AACrB,MAAA,IAAA,CAAK,cAAA,CAAe,SAAS,CAAA,GAAI,IAAA,CAAK,KAAK,IAAA,CAAK,WAAA,CAAY,IAAI,OAAA,CAAQ,YAAA;AACxE,MAAA,IAAA,CAAK,cAAA,CAAe,OAAO,CAAA,GAAI,IAAA,CAAK,KAAK,IAAA,CAAK,WAAA,CAAY,IAAI,OAAA,CAAQ,YAAA;AAEtE,MAAA,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,IAAA,CAAK,SAAS,CAAA;AACpC,MAAA,IAAA,CAAK,MAAA,EAAO;AAAA,IACd;AAAA,IAEQ,SAAA,GAAY;AAClB,MAAA,QAAA,CAAS,mBAAA,CAAoB,WAAA,EAAa,IAAA,CAAK,WAAW,CAAA;AAC1D,MAAA,QAAA,CAAS,mBAAA,CAAoB,SAAA,EAAW,IAAA,CAAK,SAAS,CAAA;AAAA,IACxD;AAAA,IAEQ,aAAa,KAAA,EAAmB;AACtC,MAAA,IAAI,CAAC,IAAA,CAAK,OAAA,IAAW,CAAC,KAAK,UAAA,EAAY;AAEvC,MAAA,KAAA,CAAM,cAAA,EAAe;AAErB,MAAA,IAAI,KAAA,CAAM,SAAS,CAAA,EAAG;AACpB,QAAA,IAAA,CAAK,KAAA,IAAS,IAAA;AAAA,MAChB,CAAA,MAAO;AACL,QAAA,IAAA,CAAK,KAAA,IAAS,IAAA;AAAA,MAChB;AAEA,MAAA,IAAA,CAAK,MAAA,EAAO;AAAA,IACd;AAAA,IAEQ,aAAa,KAAA,EAAmB;AACtC,MAAA,IAAI,CAAC,KAAK,OAAA,EAAS;AAEnB,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAA,KAAW,CAAA,IAAK,KAAK,YAAA,EAAc;AACnD,QAAA,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,OAAA,CAAQ,CAAC,CAAA,CAAE,KAAA,EAAO,KAAA,CAAM,OAAA,CAAQ,CAAC,CAAA,CAAE,KAAK,CAAA;AAAA,MACrE;AAAA,IACF;AAAA,IAEQ,YAAY,KAAA,EAAmB;AACrC,MAAA,IAAI,CAAC,KAAK,OAAA,EAAS;AAEnB,MAAA,KAAA,CAAM,cAAA,EAAe;AAErB,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAA,KAAW,CAAA,IAAK,KAAK,YAAA,EAAc;AACnD,QAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,KAAA,CAAM,OAAA,CAAQ,CAAC,CAAA,CAAE,KAAA,EAAO,KAAA,CAAM,OAAA,CAAQ,CAAC,CAAA,CAAE,KAAK,CAAA;AACjE,QAAA,IAAA,CAAK,WAAA,CAAY,UAAA,CAAW,IAAA,CAAK,SAAA,EAAW,KAAK,WAAW,CAAA;AAE5D,QAAA,MAAM,UAAU,IAAA,CAAK,UAAA;AACrB,QAAA,IAAA,CAAK,cAAA,CAAe,SAAS,CAAA,GAAI,IAAA,CAAK,KAAK,IAAA,CAAK,WAAA,CAAY,IAAI,OAAA,CAAQ,YAAA;AACxE,QAAA,IAAA,CAAK,cAAA,CAAe,OAAO,CAAA,GAAI,IAAA,CAAK,KAAK,IAAA,CAAK,WAAA,CAAY,IAAI,OAAA,CAAQ,YAAA;AAEtE,QAAA,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,IAAA,CAAK,SAAS,CAAA;AACpC,QAAA,IAAA,CAAK,MAAA,EAAO;AAAA,MACd;AAAA,IACF;AAAA,IAEA,OAAA,GAAU;AACR,MAAA,IAAA,CAAK,UAAA,CAAW,mBAAA,CAAoB,WAAA,EAAa,IAAA,CAAK,WAAW,CAAA;AACjE,MAAA,IAAA,CAAK,UAAA,CAAW,mBAAA,CAAoB,OAAA,EAAS,IAAA,CAAK,YAAY,CAAA;AAC9D,MAAA,IAAA,CAAK,UAAA,CAAW,mBAAA,CAAoB,YAAA,EAAc,IAAA,CAAK,YAAY,CAAA;AACnE,MAAA,IAAA,CAAK,UAAA,CAAW,mBAAA,CAAoB,WAAA,EAAa,IAAA,CAAK,WAAW,CAAA;AAAA,IACnE;AAAA,GACF;AACF;;;AClNO,SAAS,iBAAA,GAA6B;AAC3C,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,IAAA,OAAO,CAAC,EACN,MAAA,CAAO,qBAAA,KACN,OAAO,UAAA,CAAW,QAAQ,CAAA,IAC1B,MAAA,CAAO,UAAA,CAAW,OAAO,CAAA,IACzB,MAAA,CAAO,WAAW,oBAAoB,CAAA,CAAA,CAAA;AAAA,EAE3C,SAAS,CAAA,EAAG;AACV,IAAA,OAAO,KAAA;AAAA,EACT;AACF;AAKO,SAAS,oBAAA,GAA0C;AACxD,EAAA,MAAM,YAAA,GAAkC;AAAA,IACtC,SAAA,EAAW,KAAA;AAAA,IACX,OAAA,EAAS,CAAA;AAAA,IACT,cAAA,EAAgB,CAAA;AAAA,IAChB,cAAA,EAAgB,CAAA;AAAA,IAChB,mBAAA,EAAqB,CAAA;AAAA,IACrB,mBAAA,EAAqB,CAAA;AAAA,IACrB,0BAAA,EAA4B,CAAA;AAAA,IAC5B,oBAAA,EAAsB,CAAA;AAAA,IACtB,yBAAA,EAA2B,CAAA;AAAA,IAC3B,uBAAA,EAAyB,CAAA;AAAA,IACzB,QAAA,EAAU,SAAA;AAAA,IACV,MAAA,EAAQ;AAAA,GACV;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,IAAA,IAAI,EAAA,GAAK,MAAA,CAAO,UAAA,CAAW,QAAQ,CAAA;AACnC,IAAA,IAAI,OAAA,GAAU,CAAA;AAEd,IAAA,IAAI,CAAC,EAAA,EAAI;AACP,MAAA,EAAA,GAAK,OAAO,UAAA,CAAW,OAAO,CAAA,IAAK,MAAA,CAAO,WAAW,oBAAoB,CAAA;AACzE,MAAA,OAAA,GAAU,CAAA;AAAA,IACZ;AAEA,IAAA,IAAI,CAAC,EAAA,EAAI;AACP,MAAA,OAAO,YAAA;AAAA,IACT;AAEA,IAAA,YAAA,CAAa,SAAA,GAAY,IAAA;AACzB,IAAA,YAAA,CAAa,OAAA,GAAU,OAAA;AAGvB,IAAA,YAAA,CAAa,cAAA,GAAiB,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,gBAAgB,CAAA;AACjE,IAAA,YAAA,CAAa,cAAA,GAAiB,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,yBAAyB,CAAA;AAC1E,IAAA,YAAA,CAAa,mBAAA,GAAsB,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,qBAAqB,CAAA;AAC3E,IAAA,YAAA,CAAa,mBAAA,GAAsB,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,kBAAkB,CAAA;AACxE,IAAA,YAAA,CAAa,0BAAA,GAA6B,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,8BAA8B,CAAA;AAC3F,IAAA,YAAA,CAAa,oBAAA,GAAuB,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,uBAAuB,CAAA;AAC9E,IAAA,YAAA,CAAa,yBAAA,GAA4B,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,4BAA4B,CAAA;AACxF,IAAA,YAAA,CAAa,uBAAA,GAA0B,EAAA,CAAG,YAAA,CAAa,EAAA,CAAG,0BAA0B,CAAA;AAGpF,IAAA,MAAM,SAAA,GAAY,EAAA,CAAG,YAAA,CAAa,2BAA2B,CAAA;AAC7D,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,YAAA,CAAa,QAAA,GAAW,EAAA,CAAG,YAAA,CAAa,SAAA,CAAU,uBAAuB,CAAA;AACzE,MAAA,YAAA,CAAa,MAAA,GAAS,EAAA,CAAG,YAAA,CAAa,SAAA,CAAU,qBAAqB,CAAA;AAAA,IACvE;AAGA,IAAA,MAAM,WAAA,GAAc,EAAA,CAAG,YAAA,CAAa,oBAAoB,CAAA;AACxD,IAAA,IAAI,WAAA,EAAa;AACf,MAAA,WAAA,CAAY,WAAA,EAAY;AAAA,IAC1B;AAAA,EAEF,SAAS,CAAA,EAAG;AACV,IAAA,OAAA,CAAQ,KAAA,CAAM,uCAAuC,CAAC,CAAA;AAAA,EACxD;AAEA,EAAA,OAAO,YAAA;AACT;AAKO,SAAS,cAAA,GAA0B;AACxC,EAAA,OAAO,gEAAA,CAAiE,IAAA;AAAA,IACtE,SAAA,CAAU;AAAA,GACZ;AACF;AAKO,SAAS,mBAAmB,YAAA,EAAiC;AAClE,EAAA,MAAM,WAAW,cAAA,EAAe;AAChC,EAAA,MAAM,aAAA,GAAgB,aAAa,cAAA,IAAkB,IAAA;AAErD,EAAA,IAAI,CAAC,aAAa,SAAA,EAAW;AAC3B,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,IAAI,QAAA,IAAY,YAAA,CAAa,cAAA,GAAiB,IAAA,EAAM;AAClD,IAAA,OAAO;AAAA,MACL,UAAA,EAAY,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,kBAAkB,GAAG,CAAA;AAAA,MACjD,aAAA,EAAe,GAAA;AAAA,MACf,SAAA,EAAW,KAAA;AAAA,MACX,OAAA,EAAS;AAAA,KACX;AAAA,EACF;AAEA,EAAA,IAAI,aAAA,IAAiB,YAAA,CAAa,OAAA,KAAY,CAAA,EAAG;AAC/C,IAAA,OAAO;AAAA,MACL,YAAY,MAAA,CAAO,gBAAA;AAAA,MACnB,aAAA,EAAe,IAAA;AAAA,MACf,SAAA,EAAW,IAAA;AAAA,MACX,OAAA,EAAS;AAAA,KACX;AAAA,EACF;AAEA,EAAA,OAAO;AAAA,IACL,UAAA,EAAY,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,kBAAkB,CAAC,CAAA;AAAA,IAC/C,aAAA,EAAe,IAAA;AAAA,IACf,SAAA,EAAW,IAAA;AAAA,IACX,OAAA,EAAS;AAAA,GACX;AACF;;;AC9IO,IAAM,qBAAN,MAAyB;AAAA,EAAzB,WAAA,GAAA;AACL,IAAA,IAAA,CAAQ,UAAA,GAAa,CAAA;AACrB,IAAA,IAAA,CAAQ,QAAA,GAAW,YAAY,GAAA,EAAI;AACnC,IAAA,IAAA,CAAQ,GAAA,GAAM,EAAA;AACd,IAAA,IAAA,CAAQ,mBAA6B,EAAC;AACtC,IAAA,IAAA,CAAiB,WAAA,GAAc,EAAA;AAE/B,IAAA,IAAA,CAAQ,WAAA,GAAc;AAAA,MACpB,UAAA,EAAY,CAAA;AAAA,MACZ,QAAA,EAAU,CAAA;AAAA,MACV,KAAA,EAAO;AAAA,KACT;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAA,GAAe;AACb,IAAA,IAAA,CAAK,UAAA,EAAA;AACL,IAAA,MAAM,WAAA,GAAc,YAAY,GAAA,EAAI;AACpC,IAAA,MAAM,SAAA,GAAY,cAAc,IAAA,CAAK,QAAA;AAErC,IAAA,IAAI,aAAa,GAAA,EAAM;AACrB,MAAA,IAAA,CAAK,MAAM,IAAA,CAAK,KAAA,CAAO,IAAA,CAAK,UAAA,GAAa,MAAQ,SAAS,CAAA;AAC1D,MAAA,IAAA,CAAK,UAAA,GAAa,CAAA;AAClB,MAAA,IAAA,CAAK,QAAA,GAAW,WAAA;AAAA,IAClB;AAGA,IAAA,IAAA,CAAK,gBAAA,CAAiB,KAAK,SAAS,CAAA;AACpC,IAAA,IAAI,IAAA,CAAK,gBAAA,CAAiB,MAAA,GAAS,IAAA,CAAK,WAAA,EAAa;AACnD,MAAA,IAAA,CAAK,iBAAiB,KAAA,EAAM;AAAA,IAC9B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAA,GAAiB;AACf,IAAA,OAAO,IAAA,CAAK,GAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAA,GAA8B;AAC5B,IAAA,IAAI,IAAA,CAAK,gBAAA,CAAiB,MAAA,KAAW,CAAA,EAAG,OAAO,CAAA;AAC/C,IAAA,MAAM,GAAA,GAAM,KAAK,gBAAA,CAAiB,MAAA,CAAO,CAAC,CAAA,EAAG,CAAA,KAAM,CAAA,GAAI,CAAA,EAAG,CAAC,CAAA;AAC3D,IAAA,OAAO,GAAA,GAAM,KAAK,gBAAA,CAAiB,MAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAA,CAAiB,YAAY,EAAA,EAAa;AACxC,IAAA,OAAO,KAAK,GAAA,GAAM,SAAA;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,QAAA,EAAqB;AACrC,IAAA,IAAI,CAAC,QAAA,IAAY,CAAC,QAAA,CAAS,IAAA,EAAM;AAEjC,IAAA,MAAM,OAAO,QAAA,CAAS,IAAA;AACtB,IAAA,IAAA,CAAK,WAAA,GAAc;AAAA,MACjB,UAAA,EAAY,IAAA,CAAK,MAAA,CAAO,UAAA,IAAc,CAAA;AAAA,MACtC,QAAA,EAAU,IAAA,CAAK,MAAA,CAAO,QAAA,IAAY,CAAA;AAAA,MAClC,KAAA,EAAO,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,KAAK,MAAA,CAAO;AAAA,KAC9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,cAAA,GAAiB;AACf,IAAA,OAAO,mBAAK,IAAA,CAAK,WAAA,CAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,SAAA,GAAY;AACV,IAAA,OAAO;AAAA,MACL,KAAK,IAAA,CAAK,GAAA;AAAA,MACV,gBAAA,EAAkB,KAAK,mBAAA,EAAoB;AAAA,MAC3C,MAAA,EAAQ,KAAK,cAAA,EAAe;AAAA,MAC5B,gBAAA,EAAkB,KAAK,gBAAA;AAAiB,KAC1C;AAAA,EACF;AACF,CAAA;AAKO,IAAM,kBAAN,MAAsB;AAAA;AAAA,EAO3B,WAAA,CAAY,SAA6B,cAAA,EAA4C;AANrF,IAAA,IAAA,CAAQ,YAAA,GAA0C,QAAA;AAElD,IAAA,IAAA,CAAQ,UAAA,GAAa,IAAA;AACrB,IAAA,IAAA,CAAQ,kBAAA,GAAqB,CAAA;AAC7B,IAAA,IAAA,CAAiB,cAAA,GAAiB,GAAA;AAGhC,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,IAAA,CAAK,YAAA,GAAe,cAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAA,GAAe;AACb,IAAA,IAAI,CAAC,IAAA,CAAK,UAAA,IAAc,IAAA,CAAK,qBAAqB,CAAA,EAAG;AACnD,MAAA,IAAA,CAAK,kBAAA,EAAA;AACL,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,GAAA,GAAM,IAAA,CAAK,OAAA,CAAQ,MAAA,EAAO;AAGhC,IAAA,IAAI,GAAA,GAAM,EAAA,IAAM,IAAA,CAAK,YAAA,KAAiB,KAAA,EAAO;AAC3C,MAAA,IAAA,CAAK,eAAA,EAAgB;AACrB,MAAA,IAAA,CAAK,qBAAqB,IAAA,CAAK,cAAA;AAAA,IACjC,CAAA,MAAA,IAES,GAAA,GAAM,EAAA,IAAM,IAAA,CAAK,iBAAiB,MAAA,EAAQ;AACjD,MAAA,IAAA,CAAK,eAAA,EAAgB;AACrB,MAAA,IAAA,CAAK,qBAAqB,IAAA,CAAK,cAAA;AAAA,IACjC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,GAAwB;AACtB,IAAA,IAAI,IAAA,CAAK,iBAAiB,MAAA,EAAQ;AAChC,MAAA,IAAA,CAAK,YAAA,GAAe,QAAA;AAAA,IACtB,CAAA,MAAA,IAAW,IAAA,CAAK,YAAA,KAAiB,QAAA,EAAU;AACzC,MAAA,IAAA,CAAK,YAAA,GAAe,KAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,GAAwB;AACtB,IAAA,IAAI,IAAA,CAAK,iBAAiB,KAAA,EAAO;AAC/B,MAAA,IAAA,CAAK,YAAA,GAAe,QAAA;AAAA,IACtB,CAAA,MAAA,IAAW,IAAA,CAAK,YAAA,KAAiB,QAAA,EAAU;AACzC,MAAA,IAAA,CAAK,YAAA,GAAe,MAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAA,GAAqB;AACnB,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,GAAA,EAAK;AAAA,QACH,UAAA,EAAY,CAAA;AAAA,QACZ,aAAA,EAAe,GAAA;AAAA,QACf,SAAA,EAAW,KAAA;AAAA,QACX,cAAA,EAAgB,KAAA;AAAA,QAChB,cAAA,EAAgB,KAAA;AAAA,QAChB,SAAA,EAAW;AAAA,OACb;AAAA,MACA,MAAA,EAAQ;AAAA,QACN,UAAA,EAAY,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,kBAAkB,CAAC,CAAA;AAAA,QAC/C,aAAA,EAAe,IAAA;AAAA,QACf,SAAA,EAAW,IAAA;AAAA,QACX,cAAA,EAAgB,IAAA;AAAA,QAChB,cAAA,EAAgB,KAAA;AAAA,QAChB,SAAA,EAAW;AAAA,OACb;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,YAAY,MAAA,CAAO,gBAAA;AAAA,QACnB,aAAA,EAAe,IAAA;AAAA,QACf,SAAA,EAAW,IAAA;AAAA,QACX,cAAA,EAAgB,IAAA;AAAA,QAChB,cAAA,EAAgB,IAAA;AAAA,QAChB,SAAA,EAAW;AAAA;AACb,KACF;AAEA,IAAA,OAAO,QAAA,CAAS,KAAK,YAAY,CAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,GAAkB;AAChB,IAAA,OAAO,IAAA,CAAK,YAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,OAAA,EAAwB;AACpC,IAAA,IAAA,CAAK,UAAA,GAAa,OAAA;AAAA,EACpB;AACF,CAAA;AAKO,SAAS,cAAc,MAAA,EAAmB;AAC/C,EAAA,IAAI,CAAC,MAAA,EAAQ;AAGb,EAAA,IAAI,OAAO,QAAA,EAAU;AACnB,IAAA,MAAA,CAAO,SAAS,OAAA,EAAQ;AAAA,EAC1B;AAGA,EAAA,IAAI,OAAO,QAAA,EAAU;AACnB,IAAA,MAAM,SAAA,GAAY,KAAA,CAAM,OAAA,CAAQ,MAAA,CAAO,QAAQ,IAAI,MAAA,CAAO,QAAA,GAAW,CAAC,MAAA,CAAO,QAAQ,CAAA;AACrF,IAAA,SAAA,CAAU,OAAA,CAAQ,CAAC,QAAA,KAAkB;AAEnC,MAAA,MAAA,CAAO,IAAA,CAAK,QAAQ,CAAA,CAAE,OAAA,CAAQ,CAAA,GAAA,KAAO;AACnC,QAAA,MAAM,KAAA,GAAQ,SAAS,GAAG,CAAA;AAC1B,QAAA,IAAI,KAAA,IAAS,OAAO,KAAA,CAAM,OAAA,KAAY,UAAA,EAAY;AAChD,UAAA,KAAA,CAAM,OAAA,EAAQ;AAAA,QAChB;AAAA,MACF,CAAC,CAAA;AACD,MAAA,QAAA,CAAS,OAAA,EAAQ;AAAA,IACnB,CAAC,CAAA;AAAA,EACH;AAGA,EAAA,IAAI,OAAO,QAAA,EAAU;AACnB,IAAA,MAAA,CAAO,SAAS,OAAA,CAAQ,CAAC,KAAA,KAAe,aAAA,CAAc,KAAK,CAAC,CAAA;AAAA,EAC9D;AACF;;;AChOA,IAAM,YAAA,GAAN,MAAM,aAAA,CAAa;AAAA;AAAA,EAKT,WAAA,GAAc;AAHtB,IAAA,IAAA,CAAQ,SAAA,uBAA2C,GAAA,EAAI;AACvD,IAAA,IAAA,CAAQ,YAAA,GAAe,CAAA;AAAA,EAEA;AAAA,EAEvB,OAAO,WAAA,GAA4B;AACjC,IAAA,IAAI,CAAC,cAAa,QAAA,EAAU;AAC1B,MAAA,aAAA,CAAa,QAAA,GAAW,IAAI,aAAA,EAAa;AAAA,IAC3C;AACA,IAAA,OAAO,aAAA,CAAa,QAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAA,CACJ,WAAA,EACA,WACA,KAAA,EACA,OAAA,GAKI,EAAC,EACkE;AAvC3E,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAyCI,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,WAAW,CAAA;AAC/C,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,QAAA,CAAS,QAAA,EAAA;AACT,MAAA,QAAA,CAAS,QAAA,GAAW,KAAK,GAAA,EAAI;AAC7B,MAAA,OAAO;AAAA,QACL,UAAU,QAAA,CAAS,QAAA;AAAA,QACnB,QAAQ,QAAA,CAAS,MAAA;AAAA,QACjB,KAAA,EAAO;AAAA,OACT;AAAA,IACF;AAGA,IAAA,IAAI,IAAA,CAAK,SAAA,CAAU,IAAA,IAAQ,IAAA,CAAK,YAAA,EAAc;AAC5C,MAAA,IAAA,CAAK,uBAAA,EAAwB;AAAA,IAC/B;AAGA,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;AAC9C,IAAA,MAAA,CAAO,MAAM,KAAA,GAAQ,MAAA;AACrB,IAAA,MAAA,CAAO,MAAM,MAAA,GAAS,MAAA;AACtB,IAAA,MAAA,CAAO,MAAM,OAAA,GAAU,OAAA;AAEvB,IAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,aAAA,CAAc;AAAA,MACvC,MAAA;AAAA,MACA,SAAA,EAAA,CAAW,EAAA,GAAA,OAAA,CAAQ,SAAA,KAAR,IAAA,GAAA,EAAA,GAAqB,IAAA;AAAA,MAChC,KAAA,EAAA,CAAO,EAAA,GAAA,OAAA,CAAQ,KAAA,KAAR,IAAA,GAAA,EAAA,GAAiB,IAAA;AAAA,MACxB,eAAA,EAAA,CAAiB,EAAA,GAAA,OAAA,CAAQ,eAAA,KAAR,IAAA,GAAA,EAAA,GAA2B,kBAAA;AAAA,MAC5C,qBAAA,EAAuB;AAAA,KACxB,CAAA;AAED,IAAA,QAAA,CAAS,aAAA,CAAA,CAAc,aAAQ,UAAA,KAAR,IAAA,GAAA,EAAA,GAAsB,KAAK,GAAA,CAAI,MAAA,CAAO,gBAAA,EAAkB,CAAC,CAAC,CAAA;AACjF,IAAA,QAAA,CAAS,UAAU,OAAA,GAAU,IAAA;AAC7B,IAAA,QAAA,CAAS,SAAA,CAAU,OAAO,KAAA,CAAM,gBAAA;AAGhC,IAAA,MAAM,IAAA,GAAqB;AAAA,MACzB,QAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA,EAAU,CAAA;AAAA,MACV,QAAA,EAAU,KAAK,GAAA;AAAI,KACrB;AAEA,IAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,WAAA,EAAa,IAAI,CAAA;AACpC,IAAA,SAAA,CAAU,YAAY,MAAM,CAAA;AAE5B,IAAA,OAAO,EAAE,QAAA,EAAU,MAAA,EAAQ,KAAA,EAAO,IAAA,EAAK;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,WAAA,EAA2B;AACzC,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,WAAW,CAAA;AAC3C,IAAA,IAAI,IAAA,EAAM;AACR,MAAA,IAAA,CAAK,QAAA,EAAA;AAGL,MAAA,IAAI,IAAA,CAAK,YAAY,CAAA,EAAG;AACtB,QAAA,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,GAAA,EAAI,GAAI,GAAA;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,WAAA,EAA2B;AACzC,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,WAAW,CAAA;AAC3C,IAAA,IAAI,IAAA,EAAM;AAER,MAAA,IAAA,CAAK,SAAS,OAAA,EAAQ;AACtB,MAAA,IAAA,CAAK,SAAS,gBAAA,EAAiB;AAG/B,MAAA,IAAI,IAAA,CAAK,OAAO,aAAA,EAAe;AAC7B,QAAA,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,WAAA,CAAY,IAAA,CAAK,MAAM,CAAA;AAAA,MACnD;AAGA,MAAA,IAAA,CAAK,SAAA,CAAU,OAAO,WAAW,CAAA;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,uBAAA,GAAgC;AACtC,IAAA,IAAI,QAAA,GAA0B,IAAA;AAC9B,IAAA,IAAI,UAAA,GAAa,KAAK,GAAA,EAAI;AAG1B,IAAA,KAAA,MAAW,CAAC,EAAA,EAAI,IAAI,CAAA,IAAK,KAAK,SAAA,EAAW;AACvC,MAAA,IAAI,IAAA,CAAK,QAAA,KAAa,CAAA,IAAK,IAAA,CAAK,WAAW,UAAA,EAAY;AACrD,QAAA,UAAA,GAAa,IAAA,CAAK,QAAA;AAClB,QAAA,QAAA,GAAW,EAAA;AAAA,MACb;AAAA,IACF;AAGA,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,KAAA,MAAW,CAAC,EAAA,EAAI,IAAI,CAAA,IAAK,KAAK,SAAA,EAAW;AACvC,QAAA,IAAI,IAAA,CAAK,WAAW,UAAA,EAAY;AAC9B,UAAA,UAAA,GAAa,IAAA,CAAK,QAAA;AAClB,UAAA,QAAA,GAAW,EAAA;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,OAAA,CAAQ,IAAA,CAAK,CAAA,6BAAA,EAAgC,QAAQ,CAAA,CAAE,CAAA;AACvD,MAAA,IAAA,CAAK,gBAAgB,QAAQ,CAAA;AAAA,IAC/B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAA,GAAmB;AACjB,IAAA,KAAA,MAAW,EAAA,IAAM,IAAA,CAAK,SAAA,CAAU,IAAA,EAAK,EAAG;AACtC,MAAA,IAAA,CAAK,gBAAgB,EAAE,CAAA;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAW;AACT,IAAA,OAAO;AAAA,MACL,eAAA,EAAiB,KAAK,SAAA,CAAU,IAAA;AAAA,MAChC,cAAc,IAAA,CAAK,YAAA;AAAA,MACnB,SAAA,EAAW,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,SAAA,CAAU,OAAA,EAAS,CAAA,CAAE,GAAA,CAAI,CAAC,CAAC,EAAA,EAAI,IAAI,CAAA,MAAO;AAAA,QACnE,EAAA;AAAA,QACA,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,GAAA,EAAK,IAAA,CAAK,GAAA,EAAI,GAAI,IAAA,CAAK;AAAA,OACzB,CAAE;AAAA,KACJ;AAAA,EACF;AACF,CAAA;AAEO,IAAM,YAAA,GAAe,aAAa,WAAA,EAAY;;;AC/K9C,SAAS,iBAAiB,KAAA,EAAY;AAC3C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,MAAM,QAAA,GAAW,EAAA;AAGjB,EAAA,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,QAAA,EAAU,CAAA,EAAA,EAAK;AAClC,IAAA,MAAM,IAAI,CAAA,GAAI,QAAA;AACd,IAAA,MAAM,CAAA,GAAI,IAAI,CAAA,GAAI,GAAA;AAGlB,IAAA,IAAI,MAAA;AACJ,IAAA,IAAI,IAAI,GAAA,EAAK;AAEX,MAAA,MAAA,GAAS,MAAM,CAAA,GAAI,GAAA;AAAA,IACrB,CAAA,MAAA,IAAW,IAAI,GAAA,EAAK;AAElB,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,GAAA,CAAA,CAAK,IAAI,GAAA,IAAO,IAAA,CAAK,EAAE,CAAA,GAAI,GAAA;AAAA,IACjD,CAAA,MAAO;AAEL,MAAA,MAAA,GAAS,CAAA,GAAA,CAAK,IAAI,GAAA,IAAO,CAAA;AAAA,IAC3B;AAEA,IAAA,MAAA,CAAO,KAAK,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAA,EAAQ,CAAC,CAAC,CAAA;AAAA,EAC1C;AAGA,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,aAAA,CAAc,QAAQ,EAAE,CAAA;AAGtD,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACjD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,GAAA,GAAM,IAAI,KAAA,CAAM,IAAA,CAAK,aAAa,WAAW,CAAA;AACnD,EAAA,GAAA,CAAI,UAAA,GAAa,IAAA;AACjB,EAAA,GAAA,CAAI,aAAA,GAAgB,IAAA;AACpB,EAAA,KAAA,CAAM,IAAI,GAAG,CAAA;AAGb,EAAA,MAAM,uBAAuB,IAAI,KAAA,CAAM,iBAAiB,GAAA,EAAK,GAAA,EAAK,KAAK,EAAE,CAAA;AACzE,EAAA,MAAM,oBAAA,GAAuB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAC1D,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,IAAA,CAAK,sBAAsB,oBAAoB,CAAA;AAC9E,EAAA,YAAA,CAAa,SAAS,CAAA,GAAI,IAAA;AAC1B,EAAA,KAAA,CAAM,IAAI,YAAY,CAAA;AAGtB,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,aAAA,CAAc,KAAK,GAAG,CAAA;AAC1D,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,MAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,MAAM,KAAA,CAAM;AAAA,GACb,CAAA;AAGD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACjE,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAC1B,EAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC7B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAGf,EAAA,MAAM,kBAAkB,IAAI,KAAA,CAAM,YAAA,CAAa,GAAA,EAAK,KAAK,EAAE,CAAA;AAC3D,EAAA,MAAM,OAAA,GAAU,IAAI,KAAA,CAAM,IAAA,CAAK,iBAAiB,iBAAiB,CAAA;AACjE,EAAA,OAAA,CAAQ,SAAS,CAAA,GAAI,GAAA;AACrB,EAAA,OAAA,CAAQ,QAAA,CAAS,CAAA,GAAI,CAAC,IAAA,CAAK,EAAA,GAAK,CAAA;AAChC,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AAGjB,EAAA,MAAM,eAAe,IAAI,KAAA,CAAM,gBAAA,CAAiB,IAAA,EAAM,MAAM,GAAG,CAAA;AAC/D,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAGD,EAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AAC3D,EAAA,SAAA,CAAU,QAAA,CAAS,GAAA,CAAI,CAAA,EAAG,GAAA,EAAK,CAAC,CAAA;AAChC,EAAA,KAAA,CAAM,IAAI,SAAS,CAAA;AAGnB,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AAC7D,EAAA,WAAA,CAAY,QAAA,CAAS,GAAA,CAAI,GAAA,EAAK,GAAA,EAAK,CAAC,CAAA;AACpC,EAAA,WAAA,CAAY,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AACnC,EAAA,KAAA,CAAM,IAAI,WAAW,CAAA;AAGrB,EAAA,MAAM,gBAAgB,IAAI,KAAA,CAAM,iBAAiB,IAAA,EAAM,IAAA,EAAM,KAAK,EAAE,CAAA;AACpE,EAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACnD,KAAA,EAAO,OAAA;AAAA,IACP,WAAA,EAAa,IAAA;AAAA,IACb,OAAA,EAAS,GAAA;AAAA,IACT,SAAA,EAAW,CAAA;AAAA,IACX,SAAA,EAAW,CAAA;AAAA,IACX,SAAA,EAAW,CAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,eAAe,aAAa,CAAA;AACzD,EAAA,KAAA,CAAM,SAAS,CAAA,GAAI,IAAA;AACnB,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAGf,EAAA,MAAM,kBAAkB,IAAI,KAAA,CAAM,cAAc,GAAA,EAAK,IAAA,EAAM,GAAG,EAAE,CAAA;AAChE,EAAA,MAAM,eAAA,GAAkB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACrD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,IAAA,CAAK,iBAAiB,eAAe,CAAA;AAChE,EAAA,QAAA,CAAS,SAAS,CAAA,GAAI,GAAA;AACtB,EAAA,QAAA,CAAS,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAChC,EAAA,KAAA,CAAM,IAAI,QAAQ,CAAA;AAElB,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,IAAA,CAAK,iBAAiB,eAAe,CAAA;AAChE,EAAA,QAAA,CAAS,SAAS,CAAA,GAAI,CAAA;AACtB,EAAA,QAAA,CAAS,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAChC,EAAA,QAAA,CAAS,KAAA,CAAM,UAAU,GAAG,CAAA;AAC5B,EAAA,KAAA,CAAM,IAAI,QAAQ,CAAA;AAElB,EAAA,OAAO,KAAA;AACT;;;ACpIO,SAAS,gBAAgB,KAAA,EAAY;AAC1C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,cAAc,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AACnD,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACjD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,GAAA,GAAM,IAAI,KAAA,CAAM,IAAA,CAAK,aAAa,WAAW,CAAA;AACnD,EAAA,GAAA,CAAI,UAAA,GAAa,IAAA;AACjB,EAAA,GAAA,CAAI,aAAA,GAAgB,IAAA;AACpB,EAAA,KAAA,CAAM,IAAI,GAAG,CAAA;AAGb,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,aAAA,CAAc,KAAK,GAAG,CAAA;AAC1D,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,CAAA;AAAA,IACX,WAAA,EAAa,IAAA;AAAA,IACb,OAAA,EAAS,GAAA;AAAA,IACT,MAAM,KAAA,CAAM;AAAA,GACb,CAAA;AAED,EAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACrE,EAAA,SAAA,CAAU,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AACjC,EAAA,KAAA,CAAM,IAAI,SAAS,CAAA;AAGnB,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,aAAA,CAAc,KAAK,GAAG,CAAA;AAC1D,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,MAAM,KAAA,CAAM;AAAA,GACb,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACjE,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,IAAA,EAAM,CAAA,EAAG,CAAC,CAAA;AAC7B,EAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC7B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAEf,EAAA,MAAM,OAAA,GAAU,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACnE,EAAA,OAAA,CAAQ,QAAA,CAAS,GAAA,CAAI,GAAA,EAAK,CAAA,EAAG,CAAC,CAAA;AAC9B,EAAA,OAAA,CAAQ,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC/B,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AAEjB,EAAA,OAAO,KAAA;AACT;;;ACnDO,SAAS,eAAe,KAAA,EAAY;AACzC,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,cAAc,IAAI,KAAA,CAAM,iBAAiB,GAAA,EAAK,GAAA,EAAK,GAAG,EAAE,CAAA;AAC9D,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACjD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,CAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,WAAA,EAAa,IAAA;AAAA,IACb,OAAA,EAAS,GAAA;AAAA,IACT,SAAA,EAAW,CAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,MAAM,GAAA,GAAM,IAAI,KAAA,CAAM,IAAA,CAAK,aAAa,WAAW,CAAA;AACnD,EAAA,GAAA,CAAI,UAAA,GAAa,IAAA;AACjB,EAAA,GAAA,CAAI,aAAA,GAAgB,IAAA;AACpB,EAAA,KAAA,CAAM,IAAI,GAAG,CAAA;AAGb,EAAA,MAAM,cAAc,IAAI,KAAA,CAAM,iBAAiB,IAAA,EAAM,IAAA,EAAM,KAAK,EAAE,CAAA;AAClE,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACjD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,GAAA,GAAM,IAAI,KAAA,CAAM,IAAA,CAAK,aAAa,WAAW,CAAA;AACnD,EAAA,GAAA,CAAI,SAAS,CAAA,GAAI,IAAA;AACjB,EAAA,KAAA,CAAM,IAAI,GAAG,CAAA;AAGb,EAAA,MAAM,oBAAoB,IAAI,KAAA,CAAM,gBAAA,CAAiB,IAAA,EAAM,MAAM,GAAG,CAAA;AACpE,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACjE,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,IAAA,EAAM,CAAA,EAAG,CAAC,CAAA;AAC7B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAEf,EAAA,MAAM,OAAA,GAAU,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACnE,EAAA,OAAA,CAAQ,QAAA,CAAS,GAAA,CAAI,GAAA,EAAK,CAAA,EAAG,CAAC,CAAA;AAC9B,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AAGjB,EAAA,MAAM,oBAAoB,IAAI,KAAA,CAAM,iBAAiB,IAAA,EAAM,IAAA,EAAM,KAAK,EAAE,CAAA;AACxE,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,OAAA;AAAA,IACP,WAAA,EAAa,IAAA;AAAA,IACb,OAAA,EAAS,GAAA;AAAA,IACT,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACrE,EAAA,SAAA,CAAU,SAAS,CAAA,GAAI,KAAA;AACvB,EAAA,KAAA,CAAM,IAAI,SAAS,CAAA;AAEnB,EAAA,OAAO,KAAA;AACT;;;AC/DO,SAAS,gBAAgB,KAAA,EAAY;AAC1C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAC9B,EAAA,KAAA,CAAM,MAAA,CAAO,GAAG,EAAE,CAAA;AAClB,EAAA,KAAA,CAAM,MAAA,CAAO,GAAG,EAAE,CAAA;AAClB,EAAA,KAAA,CAAM,MAAA,CAAO,GAAG,CAAC,CAAA;AACjB,EAAA,KAAA,CAAM,MAAA,CAAO,IAAI,CAAC,CAAA;AAClB,EAAA,KAAA,CAAM,MAAA,CAAO,IAAI,EAAE,CAAA;AACnB,EAAA,KAAA,CAAM,MAAA,CAAO,GAAG,EAAE,CAAA;AAElB,EAAA,MAAM,eAAA,GAAkB;AAAA,IACtB,KAAA,EAAO,CAAA;AAAA,IACP,YAAA,EAAc,IAAA;AAAA,IACd,cAAA,EAAgB,GAAA;AAAA,IAChB,SAAA,EAAW,GAAA;AAAA,IACX,aAAA,EAAe;AAAA,GACjB;AAEA,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,eAAA,CAAgB,OAAO,eAAe,CAAA;AACjE,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAC9C,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,OAAA,GAAU,IAAI,KAAA,CAAM,IAAA,CAAK,UAAU,QAAQ,CAAA;AACjD,EAAA,OAAA,CAAQ,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC/B,EAAA,OAAA,CAAQ,UAAA,GAAa,IAAA;AACrB,EAAA,OAAA,CAAQ,aAAA,GAAgB,IAAA;AACxB,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AAEjB,EAAA,OAAO,KAAA;AACT;;;AClCO,SAAS,cAAc,KAAA,EAAY;AACxC,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,WAAW,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AAChD,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAC9C,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,OAAA,GAAU,IAAI,KAAA,CAAM,IAAA,CAAK,UAAU,QAAQ,CAAA;AACjD,EAAA,OAAA,CAAQ,UAAA,GAAa,IAAA;AACrB,EAAA,OAAA,CAAQ,aAAA,GAAgB,IAAA;AACxB,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AAEjB,EAAA,OAAO,KAAA;AACT;;;ACjBO,SAAS,gBAAgB,KAAA,EAAY;AAC1C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,gBAAgB,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AACrD,EAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACnD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,eAAe,aAAa,CAAA;AACzD,EAAA,KAAA,CAAM,UAAA,GAAa,IAAA;AACnB,EAAA,KAAA,CAAM,aAAA,GAAgB,IAAA;AACtB,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAGf,EAAA,MAAM,eAAe,IAAI,KAAA,CAAM,WAAA,CAAY,GAAA,EAAK,MAAM,GAAG,CAAA;AACzD,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,QAAA,EAAU,KAAA;AAAA,IACV,iBAAA,EAAmB;AAAA,GACpB,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACtD,EAAA,IAAA,CAAK,SAAS,CAAA,GAAI,IAAA;AAClB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAEd,EAAA,OAAO,KAAA;AACT;;;AC/BO,SAAS,oBAAoB,KAAA,EAAY;AAC9C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,kBAAA,CAAmB,KAAK,CAAC,CAAA;AACpD,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAC9C,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,QAAA,EAAU,OAAA;AAAA,IACV,iBAAA,EAAmB,GAAA;AAAA,IACnB,SAAA,EAAW,CAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,UAAU,QAAQ,CAAA;AAC9C,EAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,EAAA,IAAA,CAAK,aAAA,GAAgB,IAAA;AACrB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAEd,EAAA,OAAO,KAAA;AACT;;;ACrBO,SAAS,yBAAyB,KAAA,EAAY;AACnD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,iBAAiB,IAAI,KAAA,CAAM,iBAAiB,CAAA,EAAG,CAAA,EAAG,KAAK,EAAE,CAAA;AAC/D,EAAA,MAAM,cAAA,GAAiB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACpD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,MAAM,MAAA,GAAS,IAAI,KAAA,CAAM,IAAA,CAAK,gBAAgB,cAAc,CAAA;AAC5D,EAAA,MAAA,CAAO,UAAA,GAAa,IAAA;AACpB,EAAA,MAAA,CAAO,aAAA,GAAgB,IAAA;AACvB,EAAA,KAAA,CAAM,IAAI,MAAM,CAAA;AAGhB,EAAA,MAAM,gBAAgB,IAAI,KAAA,CAAM,WAAA,CAAY,GAAA,EAAK,KAAK,GAAG,CAAA;AACzD,EAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACnD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,eAAe,aAAa,CAAA;AACzD,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,GAAA,EAAK,CAAA,EAAG,CAAC,CAAA;AAC5B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAEf,EAAA,OAAO,KAAA;AACT;;;AC/BO,SAAS,0BAA0B,KAAA,EAAY;AACpD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,eAAe,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AACpD,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACtD,EAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,EAAA,IAAA,CAAK,aAAA,GAAgB,IAAA;AACrB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAGd,EAAA,MAAM,eAAe,IAAI,KAAA,CAAM,gBAAA,CAAiB,GAAA,EAAK,KAAK,CAAC,CAAA;AAC3D,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACvD,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,IAAA,EAAM,CAAA,EAAG,CAAC,CAAA;AAC7B,EAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC7B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAEf,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACvD,EAAA,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,GAAA,EAAK,CAAA,EAAG,CAAC,CAAA;AAC5B,EAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC7B,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAEf,EAAA,OAAO,KAAA;AACT;;;ACnCO,SAAS,wBAAwB,KAAA,EAAY;AAClD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,eAAe,IAAI,KAAA,CAAM,iBAAiB,GAAA,EAAK,GAAA,EAAK,GAAG,EAAE,CAAA;AAC/D,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACtD,EAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,EAAA,IAAA,CAAK,aAAA,GAAgB,IAAA;AACrB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAGd,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,cAAA,CAAe,KAAK,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,IAAA,CAAK,EAAA,GAAK,CAAA,EAAG,CAAA,EAAG,IAAA,CAAK,KAAK,CAAC,CAAA;AACzF,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACtD,EAAA,IAAA,CAAK,SAAS,CAAA,GAAI,GAAA;AAClB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAEd,EAAA,OAAO,KAAA;AACT;;;ACvBO,SAAS,0BAA0B,KAAA,EAAY;AACpD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,gBAAgB,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,GAAG,GAAG,CAAA;AACrD,EAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACnD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,eAAe,aAAa,CAAA;AACzD,EAAA,KAAA,CAAM,UAAA,GAAa,IAAA;AACnB,EAAA,KAAA,CAAM,aAAA,GAAgB,IAAA;AACtB,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAGf,EAAA,MAAM,iBAAiB,IAAI,KAAA,CAAM,WAAA,CAAY,GAAA,EAAK,KAAK,GAAG,CAAA;AAC1D,EAAA,MAAM,cAAA,GAAiB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACpD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW,GAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,KAAA,IAAS,CAAA,GAAI,IAAA,EAAM,CAAA,IAAK,GAAA,EAAK,KAAK,CAAA,EAAG;AACnC,IAAA,KAAA,IAAS,CAAA,GAAI,IAAA,EAAM,CAAA,IAAK,GAAA,EAAK,KAAK,CAAA,EAAG;AACnC,MAAA,MAAM,MAAA,GAAS,IAAI,KAAA,CAAM,IAAA,CAAK,gBAAgB,cAAc,CAAA;AAC5D,MAAA,MAAA,CAAO,QAAA,CAAS,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,IAAI,CAAA;AAC9B,MAAA,KAAA,CAAM,IAAI,MAAM,CAAA;AAAA,IAClB;AAAA,EACF;AAEA,EAAA,OAAO,KAAA;AACT;;;ACnCO,SAAS,sBAAsB,KAAA,EAAY;AAChD,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,mBAAmB,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AACxD,EAAA,MAAM,gBAAA,GAAmB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACtD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,IAAA,CAAK,kBAAkB,gBAAgB,CAAA;AAClE,EAAA,QAAA,CAAS,SAAS,CAAA,GAAI,IAAA;AACtB,EAAA,QAAA,CAAS,UAAA,GAAa,IAAA;AACtB,EAAA,QAAA,CAAS,aAAA,GAAgB,IAAA;AACzB,EAAA,KAAA,CAAM,IAAI,QAAQ,CAAA;AAGlB,EAAA,MAAM,gBAAgB,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,KAAK,CAAC,CAAA;AACrD,EAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACnD,KAAA,EAAO,OAAA;AAAA,IACP,WAAA,EAAa,IAAA;AAAA,IACb,OAAA,EAAS,GAAA;AAAA,IACT,SAAA,EAAW,CAAA;AAAA,IACX,SAAA,EAAW,CAAA;AAAA,IACX,SAAA,EAAW,CAAA;AAAA,IACX,kBAAA,EAAoB;AAAA,GACrB,CAAA;AAED,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,IAAA,CAAK,eAAe,aAAa,CAAA;AACzD,EAAA,KAAA,CAAM,SAAS,CAAA,GAAI,IAAA;AACnB,EAAA,KAAA,CAAM,IAAI,KAAK,CAAA;AAGf,EAAA,MAAM,oBAAoB,IAAI,KAAA,CAAM,gBAAA,CAAiB,IAAA,EAAM,MAAM,CAAC,CAAA;AAClE,EAAA,MAAM,iBAAA,GAAoB,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACvD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,KAAA,IAAS,CAAA,GAAI,EAAA,EAAI,CAAA,IAAK,CAAA,EAAG,KAAK,GAAA,EAAK;AACjC,IAAA,KAAA,IAAS,CAAA,GAAI,EAAA,EAAI,CAAA,IAAK,CAAA,EAAG,KAAK,GAAA,EAAK;AACjC,MAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,IAAA,CAAK,mBAAmB,iBAAiB,CAAA;AACrE,MAAA,SAAA,CAAU,QAAA,CAAS,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAC9B,MAAA,KAAA,CAAM,IAAI,SAAS,CAAA;AAAA,IACrB;AAAA,EACF;AAEA,EAAA,OAAO,KAAA;AACT;;;AClDO,SAAS,kBAAkB,KAAA,EAAY;AAC5C,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAG9B,EAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,KAAA,EAAM;AAClC,EAAA,SAAA,CAAU,MAAA,CAAO,IAAI,IAAI,CAAA;AACzB,EAAA,SAAA,CAAU,MAAA,CAAO,GAAG,IAAI,CAAA;AACxB,EAAA,SAAA,CAAU,MAAA,CAAO,GAAG,GAAG,CAAA;AACvB,EAAA,SAAA,CAAU,MAAA,CAAO,IAAI,GAAG,CAAA;AACxB,EAAA,SAAA,CAAU,MAAA,CAAO,IAAI,IAAI,CAAA;AAEzB,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,eAAA,CAAgB,SAAA,EAAW;AAAA,IACxD,KAAA,EAAO,GAAA;AAAA,IACP,YAAA,EAAc,IAAA;AAAA,IACd,cAAA,EAAgB,IAAA;AAAA,IAChB,SAAA,EAAW,IAAA;AAAA,IACX,aAAA,EAAe;AAAA,GAChB,CAAA;AAED,EAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IAClD,KAAA,EAAO,QAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,cAAc,YAAY,CAAA;AACtD,EAAA,IAAA,CAAK,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,EAAA,GAAK,CAAA;AAC5B,EAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,EAAA,IAAA,CAAK,aAAA,GAAgB,IAAA;AACrB,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA;AAGd,EAAA,MAAM,cAAc,IAAI,KAAA,CAAM,WAAA,CAAY,GAAA,EAAK,KAAK,GAAG,CAAA;AACvD,EAAA,MAAM,WAAA,GAAc,IAAI,KAAA,CAAM,oBAAA,CAAqB;AAAA,IACjD,KAAA,EAAO,OAAA;AAAA,IACP,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,GAAA,GAAM,IAAI,KAAA,CAAM,IAAA,CAAK,aAAa,WAAW,CAAA;AACnD,EAAA,GAAA,CAAI,SAAS,CAAA,GAAI,KAAA;AACjB,EAAA,KAAA,CAAM,IAAI,GAAG,CAAA;AAEb,EAAA,OAAO,KAAA;AACT;;;ACzBO,IAAM,gBAAA,GAAwD;AAAA,EACnE,aAAA,EAAe;AAAA,IACb,EAAA,EAAI,aAAA;AAAA,IACJ,IAAA,EAAM,iBAAA;AAAA,IACN,WAAA,EAAa,oDAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,gBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,CAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,WAAA,EAAa;AAAA,IACX,EAAA,EAAI,WAAA;AAAA,IACJ,IAAA,EAAM,eAAA;AAAA,IACN,WAAA,EAAa,gCAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,eAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,CAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,WAAA,EAAa;AAAA,IACX,EAAA,EAAI,WAAA;AAAA,IACJ,IAAA,EAAM,eAAA;AAAA,IACN,WAAA,EAAa,yCAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,cAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,CAAA;AAAA,MACX,SAAA,EAAW,GAAA;AAAA,MACX,WAAA,EAAa,IAAA;AAAA,MACb,OAAA,EAAS;AAAA;AACX,GACF;AAAA,EAEA,YAAA,EAAc;AAAA,IACZ,EAAA,EAAI,YAAA;AAAA,IACJ,IAAA,EAAM,gBAAA;AAAA,IACN,WAAA,EAAa,qCAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,eAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,SAAA,EAAW;AAAA,IACT,EAAA,EAAI,SAAA;AAAA,IACJ,IAAA,EAAM,yBAAA;AAAA,IACN,WAAA,EAAa,0CAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,IAAA,EAAM,CAAC,CAAA;AAAA,IACrB,cAAA,EAAgB,aAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,CAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,YAAA,EAAc;AAAA,IACZ,EAAA,EAAI,YAAA;AAAA,IACJ,IAAA,EAAM,gBAAA;AAAA,IACN,WAAA,EAAa,mCAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,aAAA,EAAe,KAAA;AAAA,IACf,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,eAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA,KACb;AAAA,IACA,SAAA,EAAW;AAAA,MACT,IAAA,EAAM,OAAA;AAAA,MACN,KAAA,EAAO,CAAA;AAAA,MACP,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,gBAAA,EAAkB;AAAA,IAChB,EAAA,EAAI,gBAAA;AAAA,IACJ,IAAA,EAAM,oBAAA;AAAA,IACN,WAAA,EAAa,sCAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,aAAA,EAAe,OAAA;AAAA,IACf,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,mBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW,GAAA;AAAA,MACX,iBAAA,EAAmB;AAAA,KACrB;AAAA,IACA,SAAA,EAAW;AAAA,MACT,IAAA,EAAM,QAAA;AAAA,MACN,KAAA,EAAO;AAAA;AACT,GACF;AAAA,EAEA,qBAAA,EAAuB;AAAA,IACrB,EAAA,EAAI,qBAAA;AAAA,IACJ,IAAA,EAAM,qBAAA;AAAA,IACN,WAAA,EAAa,qCAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,wBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,sBAAA,EAAwB;AAAA,IACtB,EAAA,EAAI,sBAAA;AAAA,IACJ,IAAA,EAAM,4BAAA;AAAA,IACN,WAAA,EAAa,qCAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,EAAA,EAAI,CAAC,CAAA;AAAA,IACnB,cAAA,EAAgB,yBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,oBAAA,EAAsB;AAAA,IACpB,EAAA,EAAI,oBAAA;AAAA,IACJ,IAAA,EAAM,2BAAA;AAAA,IACN,WAAA,EAAa,qCAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,uBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,sBAAA,EAAwB;AAAA,IACtB,EAAA,EAAI,sBAAA;AAAA,IACJ,IAAA,EAAM,sBAAA;AAAA,IACN,WAAA,EAAa,+CAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,yBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,mBAAA,EAAqB;AAAA,IACnB,EAAA,EAAI,mBAAA;AAAA,IACJ,IAAA,EAAM,mBAAA;AAAA,IACN,WAAA,EAAa,oCAAA;AAAA,IACb,KAAA,EAAO,OAAA;AAAA,IACP,KAAA,EAAO,GAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,IAAA,EAAM,CAAC,CAAA;AAAA,IACrB,cAAA,EAAgB,qBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EAEA,cAAA,EAAgB;AAAA,IACd,EAAA,EAAI,cAAA;AAAA,IACJ,IAAA,EAAM,qBAAA;AAAA,IACN,WAAA,EAAa,oCAAA;AAAA,IACb,KAAA,EAAO,QAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAClB,cAAA,EAAgB,iBAAA;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,SAAA,EAAW,GAAA;AAAA,MACX,SAAA,EAAW;AAAA;AACb;AAEJ,CAAA;;;AChOO,SAAS,cAAA,CAAe,OAAY,MAAA,EAAuB;AAChE,EAAA,MAAM,SAAA,GAAY;AAAA,IAChB,OAAO,MAAA,CAAO,KAAA;AAAA,IACd,WAAA,EAAa,OAAO,WAAA,IAAe,KAAA;AAAA,IACnC,OAAA,EAAS,OAAO,OAAA,IAAW;AAAA,GAC7B;AAEA,EAAA,QAAQ,OAAO,IAAA;AAAM,IACnB,KAAK,UAAA;AACH,MAAA,OAAO,IAAI,KAAA,CAAM,oBAAA,CAAqB,aAAA,CAAA,cAAA,CAAA,EAAA,EACjC,SAAA,CAAA,EADiC;AAAA,QAEpC,SAAA,EAAW,OAAO,SAAA,IAAa,CAAA;AAAA,QAC/B,SAAA,EAAW,OAAO,SAAA,IAAa,GAAA;AAAA,QAC/B,QAAA,EAAU,OAAO,QAAA,IAAY,CAAA;AAAA,QAC7B,iBAAA,EAAmB,OAAO,iBAAqB;AAAA,QAC/C,SAAA,EAAW,GAAA;AAAA,QACX,kBAAA,EAAoB;AAAA,OACtB,CAAC,CAAA;AAAA,IAEH,KAAK,UAAA;AACH,MAAA,OAAO,IAAI,KAAA,CAAM,oBAAA,CAAqB,aAAA,CAAA,cAAA,CAAA,EAAA,EACjC,SAAA,CAAA,EADiC;AAAA,QAEpC,SAAA,EAAW,OAAO,SAAA,IAAa,CAAA;AAAA,QAC/B,SAAA,EAAW,OAAO,SAAA,IAAa,GAAA;AAAA,QAC/B,QAAA,EAAU,OAAO,QAAA,IAAY,CAAA;AAAA,QAC7B,iBAAA,EAAmB,OAAO;AAAqB,OACjD,CAAC,CAAA;AAAA,IAEH,KAAK,OAAA;AAAA,IACL;AACE,MAAA,OAAO,IAAI,KAAA,CAAM,iBAAA,CAAkB,SAAS,CAAA;AAAA;AAElD;AC7BA,IAAI,eAAA,GAAkB,CAAA;AAMf,SAAS,WAAA,CAAY;AAAA,EAC1B,MAAA;AAAA,EACA,WAAA,GAAc,IAAA;AAAA,EACd,QAAA,GAAW,KAAA;AAAA,EACX,UAAA,GAAa,KAAA;AAAA,EACb,aAAA,GAAgB,IAAA;AAAA,EAChB,SAAA,GAAY,EAAA;AAAA,EACZ,MAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA,GAAa,KAAA;AAAA,EACb,eAAA,GAAkB;AACpB,CAAA,EAAqB;AACnB,EAAA,MAAM,QAAA,GAAW,OAAuB,IAAI,CAAA;AAC5C,EAAA,MAAM,UAAA,GAAa,OAA4B,IAAI,CAAA;AACnD,EAAA,MAAM,cAAA,GAAiB,OAAsB,IAAI,CAAA;AACjD,EAAA,MAAM,cAAA,GAAiB,OAAkC,IAAI,CAAA;AAC7D,EAAA,MAAM,UAAA,GAAa,OAA+B,IAAI,CAAA;AACtD,EAAA,MAAM,UAAA,GAAa,MAAA,CAAO,CAAA,QAAA,EAAW,EAAE,eAAe,CAAA,CAAE,CAAA;AAExD,EAAA,MAAM,CAAC,SAAA,EAAW,YAAY,CAAA,GAAI,SAAS,IAAI,CAAA;AAC/C,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAI,SAAuB,IAAI,CAAA;AACrD,EAAA,MAAM,CAAC,cAAA,EAAgB,iBAAiB,CAAA,GAAI,SAAS,IAAI,CAAA;AAGzD,EAAA,MAAM,SAAA,GAAY,YAAY,YAAY;AACxC,IAAA,IAAI,CAAC,SAAS,OAAA,EAAS;AAEvB,IAAA,IAAI;AAEF,MAAA,IAAI,CAAC,mBAAkB,EAAG;AACxB,QAAA,MAAM,IAAI,MAAM,uCAAuC,CAAA;AAAA,MACzD;AAGA,MAAA,MAAM,KAAA,GAAQ,MAAM,SAAA,EAAU;AAG9B,MAAA,MAAM,eAAe,oBAAA,EAAqB;AAC1C,MAAA,MAAM,eAAA,GAAkB,mBAAmB,YAAY,CAAA;AAEvD,MAAA,IAAI,CAAC,eAAA,EAAiB;AACpB,QAAA,MAAM,IAAI,MAAM,sCAAsC,CAAA;AAAA,MACxD;AAGA,MAAA,cAAA,CAAe,OAAA,GAAU,IAAI,kBAAA,EAAmB;AAChD,MAAA,UAAA,CAAW,UAAU,IAAI,eAAA;AAAA,QACvB,cAAA,CAAe,OAAA;AAAA,QACf,eAAA,GAAkB,QAAQ,eAAA,CAAgB;AAAA,OAC5C;AAGA,MAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,KAAA,EAAM;AAC9B,MAAA,KAAA,CAAM,UAAA,GAAa,IAAI,KAAA,CAAM,KAAA,CAAM,MAAQ,CAAA;AAG3C,MAAA,MAAM,MAAA,GAAS,IAAI,KAAA,CAAM,iBAAA;AAAA,QACvB,EAAA;AAAA,QACA,QAAA,CAAS,OAAA,CAAQ,WAAA,GAAc,QAAA,CAAS,OAAA,CAAQ,YAAA;AAAA,QAChD,GAAA;AAAA,QACA;AAAA,OACF;AACA,MAAA,MAAA,CAAO,QAAA,CAAS,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAG3B,MAAA,MAAM,cAAA,GAAiB,UAAA,CAAW,OAAA,CAAQ,kBAAA,EAAmB;AAC7D,MAAA,MAAM,EAAE,QAAA,EAAU,MAAA,EAAQ,KAAA,EAAM,GAAI,MAAM,YAAA,CAAa,WAAA;AAAA,QACrD,UAAA,CAAW,OAAA;AAAA,QACX,QAAA,CAAS,OAAA;AAAA,QACT,KAAA;AAAA,QACA;AAAA,UACE,WAAW,cAAA,CAAe,SAAA;AAAA,UAC1B,KAAA,EAAO,IAAA;AAAA,UACP,eAAA,EAAiB,kBAAkB,WAAA,GAAc,kBAAA;AAAA,UACjD,YAAY,cAAA,CAAe;AAAA;AAC7B,OACF;AAGA,MAAA,QAAA,CAAS,QAAQ,QAAA,CAAS,OAAA,CAAQ,WAAA,EAAa,QAAA,CAAS,QAAQ,YAAY,CAAA;AAC5E,MAAA,QAAA,CAAS,SAAA,CAAU,UAAU,cAAA,CAAe,cAAA;AAG5C,MAAA,IAAI,QAAA,GAAgB,IAAA;AACpB,MAAA,IAAI,WAAA,EAAa;AACf,QAAA,MAAM,aAAA,GAAgB,MAAM,iBAAA,CAAkB,KAAK,CAAA;AACnD,QAAA,QAAA,GAAW,IAAI,aAAA,CAAc,MAAA,EAAQ,MAAM,CAAA;AAC3C,QAAA,QAAA,CAAS,aAAA,GAAgB,IAAA;AACzB,QAAA,QAAA,CAAS,aAAA,GAAgB,IAAA;AACzB,QAAA,QAAA,CAAS,UAAA,GAAa,IAAA;AACtB,QAAA,QAAA,CAAS,SAAA,GAAY,IAAA;AACrB,QAAA,QAAA,CAAS,UAAA,GAAa,UAAA;AACtB,QAAA,QAAA,CAAS,kBAAkB,aAAA,GAAgB,EAAA;AAAA,MAC7C;AAGA,MAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,YAAA,CAAa,UAAU,GAAG,CAAA;AACzD,MAAA,KAAA,CAAM,IAAI,YAAY,CAAA;AAEtB,MAAA,MAAM,gBAAA,GAAmB,IAAI,KAAA,CAAM,gBAAA,CAAiB,UAAU,GAAG,CAAA;AACjE,MAAA,gBAAA,CAAiB,QAAA,CAAS,GAAA,CAAI,EAAA,EAAI,EAAA,EAAI,CAAC,CAAA;AACvC,MAAA,gBAAA,CAAiB,aAAa,cAAA,CAAe,cAAA;AAC7C,MAAA,IAAI,iBAAiB,MAAA,EAAQ;AAC3B,QAAA,gBAAA,CAAiB,MAAA,CAAO,OAAA,CAAQ,KAAA,GAAQ,cAAA,CAAe,aAAA;AACvD,QAAA,gBAAA,CAAiB,MAAA,CAAO,OAAA,CAAQ,MAAA,GAAS,cAAA,CAAe,aAAA;AAAA,MAC1D;AACA,MAAA,KAAA,CAAM,IAAI,gBAAgB,CAAA;AAG1B,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,aAAa,IAAI,KAAA,CAAM,WAAW,EAAA,EAAI,EAAA,EAAI,SAAU,OAAQ,CAAA;AAClE,QAAA,KAAA,CAAM,IAAI,UAAU,CAAA;AAAA,MACtB;AAGA,MAAA,UAAA,CAAW,OAAA,GAAU;AAAA,QACnB,KAAA;AAAA,QACA,MAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA,OACF;AAGA,MAAA,MAAM,SAAA,CAAU,OAAO,KAAK,CAAA;AAG5B,MAAA,IAAI,WAAW,MAAA,EAAQ;AACrB,QAAA,MAAA,CAAO,gBAAA,CAAiB,SAAS,WAAW,CAAA;AAAA,MAC9C;AAGA,MAAA,OAAA,EAAQ;AAER,MAAA,YAAA,CAAa,KAAK,CAAA;AAClB,MAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,EAAA;AAAA,IAEF,SAAS,GAAA,EAAK;AACZ,MAAA,MAAME,SAAQ,GAAA,YAAe,KAAA,GAAQ,GAAA,GAAM,IAAI,MAAM,+BAA+B,CAAA;AACpF,MAAA,QAAA,CAASA,MAAK,CAAA;AACd,MAAA,iBAAA,CAAkB,mBAAmB,CAAA;AACrC,MAAA,OAAA,IAAA,IAAA,GAAA,MAAA,GAAA,OAAA,CAAUA,MAAAA,CAAAA;AACV,MAAA,OAAA,CAAQ,KAAA,CAAM,qCAAqCA,MAAK,CAAA;AAAA,IAC1D;AAAA,EACF,CAAA,EAAG,CAAC,MAAA,EAAQ,WAAA,EAAa,QAAA,EAAU,UAAA,EAAY,aAAA,EAAe,OAAA,EAAS,MAAA,EAAQ,OAAA,EAAS,eAAe,CAAC,CAAA;AAGxG,EAAA,MAAM,SAAA,GAAY,WAAA,CAAY,OAAO,KAAA,EAAY,KAAA,KAAe;AArKlE,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAsKI,IAAA,MAAM,QAAA,GAAW,iBAAiB,MAAM,CAAA;AACxC,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qBAAA,EAAwB,MAAM,CAAA,CAAE,CAAA;AAAA,IAClD;AAGA,IAAA,MAAM,UAAA,GAAa,IAAI,KAAA,CAAM,KAAA,EAAM;AAGnC,IAAA,IAAI,SAAS,QAAA,EAAU;AACrB,MAAA,UAAA,CAAW,QAAA,CAAS,GAAA,CAAI,GAAG,QAAA,CAAS,QAAQ,CAAA;AAAA,IAC9C;AACA,IAAA,IAAI,SAAS,QAAA,EAAU;AACrB,MAAA,UAAA,CAAW,QAAA,CAAS,GAAA,CAAI,GAAG,QAAA,CAAS,QAAQ,CAAA;AAAA,IAC9C;AACA,IAAA,IAAI,SAAS,KAAA,EAAO;AAClB,MAAA,UAAA,CAAW,KAAA,CAAM,SAAA,CAAU,QAAA,CAAS,KAAK,CAAA;AAAA,IAC3C;AAEA,IAAA,IAAI;AAEF,MAAA,IAAI,QAAA;AACJ,MAAA,IAAI,SAAS,cAAA,EAAgB;AAC3B,QAAA,QAAA,GAAW,MAAM,QAAA,CAAS,cAAA,CAAe,KAAK,CAAA;AAAA,MAChD,CAAA,MAAO;AAEL,QAAA,QAAA,GAAW,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,GAAG,CAAC,CAAA;AAAA,MAC1C;AAGA,MAAA,IAAI,CAAC,QAAA,IAAY,CAAC,QAAA,CAAS,UAAA,EAAY;AACrC,QAAA,OAAA,CAAQ,IAAA,CAAK,CAAA,qBAAA,EAAwB,MAAM,CAAA,mBAAA,CAAqB,CAAA;AAChE,QAAA,QAAA,GAAW,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,GAAG,CAAC,CAAA;AAAA,MAC1C;AAGA,MAAA,MAAM,cAAA,GAAiB;AAAA,QACrB,MAAM,QAAA,CAAS,IAAA;AAAA,QACf,IAAA,EAAA,CAAA,CAAO,EAAA,GAAA,QAAA,CAAS,aAAA,KAAT,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,IAAA,KAAQ,UAAA;AAAA,QACvC,KAAA,EAAO,SAAS,KAAA,IAAS,OAAA;AAAA,QACzB,SAAA,EAAA,CAAW,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,CAAS,aAAA,KAAT,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,cAAxB,IAAA,GAAA,EAAA,GAAqC,GAAA;AAAA,QAChD,SAAA,EAAA,CAAW,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,CAAS,aAAA,KAAT,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,cAAxB,IAAA,GAAA,EAAA,GAAqC,GAAA;AAAA,QAChD,WAAA,EAAA,CAAa,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,CAAS,aAAA,KAAT,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,gBAAxB,IAAA,GAAA,EAAA,GAAuC,KAAA;AAAA,QACpD,OAAA,EAAA,CAAS,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,CAAS,aAAA,KAAT,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,YAAxB,IAAA,GAAA,EAAA,GAAmC,CAAA;AAAA,QAC5C,QAAA,EAAU,SAAS,aAAA,IAAiB,CAAA;AAAA,QACpC,iBAAA,EAAmB;AAAA,OACrB;AAEA,MAAA,MAAM,QAAA,GAAW,cAAA,CAAe,KAAA,EAAO,cAAc,CAAA;AAGrD,MAAA,IAAI,IAAA;AACJ,MAAA,IAAI;AACF,QAAA,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,QAAA,EAAU,QAAQ,CAAA;AAAA,MAC1C,SAAS,SAAA,EAAW;AAClB,QAAA,OAAA,CAAQ,KAAA,CAAM,8CAA8C,SAAS,CAAA;AACrE,QAAA,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM,iBAAA,CAAkB,EAAE,KAAA,EAAO,QAAA,CAAS,KAAA,IAAS,OAAA,EAAU,CAAA;AACvF,QAAA,IAAA,GAAO,IAAI,KAAA,CAAM,IAAA,CAAK,QAAA,EAAU,aAAa,CAAA;AAAA,MAC/C;AAEA,MAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,MAAA,IAAA,CAAK,aAAA,GAAgB,IAAA;AACrB,MAAA,IAAA,CAAK,IAAA,GAAO,MAAA;AAGZ,MAAA,IAAI,SAAS,SAAA,EAAW;AACtB,QAAA,IAAA,CAAK,QAAA,CAAS,YAAY,QAAA,CAAS,SAAA;AAAA,MACrC;AAEA,MAAA,UAAA,CAAW,IAAI,IAAI,CAAA;AACnB,MAAA,KAAA,CAAM,IAAI,UAAU,CAAA;AAAA,IAEtB,SAAS,UAAA,EAAY;AACnB,MAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,qBAAA,EAAwB,MAAM,CAAA,CAAA,CAAA,EAAK,UAAU,CAAA;AAE3D,MAAA,MAAM,mBAAmB,IAAI,KAAA,CAAM,WAAA,CAAY,CAAA,EAAG,GAAG,CAAC,CAAA;AACtD,MAAA,MAAM,gBAAA,GAAmB,IAAI,KAAA,CAAM,iBAAA,CAAkB;AAAA,QACnD,KAAA,EAAO,QAAA;AAAA,QACP,SAAA,EAAW;AAAA,OACZ,CAAA;AACD,MAAA,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM,IAAA,CAAK,kBAAkB,gBAAgB,CAAA;AACtE,MAAA,UAAA,CAAW,IAAI,YAAY,CAAA;AAC3B,MAAA,KAAA,CAAM,IAAI,UAAU,CAAA;AAAA,IACtB;AAAA,EACF,CAAA,EAAG,CAAC,MAAA,EAAQ,UAAU,CAAC,CAAA;AAGvB,EAAA,MAAM,WAAA,GAAc,WAAA,CAAY,CAAC,KAAA,KAAsB;AACrD,IAAA,IAAI,CAAC,UAAA,CAAW,OAAA,IAAW,CAAC,OAAA,EAAS;AAErC,IAAA,MAAM,EAAE,MAAA,EAAQ,QAAA,EAAU,KAAA,KAAU,UAAA,CAAW,OAAA;AAC/C,IAAA,MAAM,QAAS,MAAA,CAAe,KAAA;AAC9B,IAAA,IAAI,CAAC,KAAA,EAAO;AAGZ,IAAA,MAAM,IAAA,GAAQ,KAAA,CAAM,MAAA,CAAuB,qBAAA,EAAsB;AACjE,IAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,OAAA;AAAA,MAAA,CACpB,MAAM,OAAA,GAAU,IAAA,CAAK,IAAA,IAAQ,IAAA,CAAK,QAAS,CAAA,GAAI,CAAA;AAAA,MACjD,GAAG,KAAA,CAAM,OAAA,GAAU,KAAK,GAAA,IAAO,IAAA,CAAK,UAAU,CAAA,GAAI;AAAA,KACpD;AAGA,IAAA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAM,SAAA,EAAU;AACtC,IAAA,SAAA,CAAU,aAAA,CAAc,OAAO,MAAM,CAAA;AAErC,IAAA,MAAM,UAAA,GAAa,SAAA,CAAU,gBAAA,CAAiB,KAAA,CAAM,UAAU,IAAI,CAAA;AAClE,IAAA,IAAI,UAAA,CAAW,SAAS,CAAA,EAAG;AACzB,MAAA,MAAM,MAAA,GAAS,UAAA,CAAW,CAAC,CAAA,CAAE,MAAA;AAC7B,MAAA,OAAA,CAAQ,MAAA,CAAO,QAAQ,MAAS,CAAA;AAAA,IAClC;AAAA,EACF,CAAA,EAAG,CAAC,OAAO,CAAC,CAAA;AAGZ,EAAA,MAAM,OAAA,GAAU,YAAY,MAAM;AAvRpC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAwRI,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AAEzB,IAAA,MAAM,EAAE,KAAA,EAAO,MAAA,EAAQ,QAAA,EAAU,QAAA,KAAa,UAAA,CAAW,OAAA;AAGzD,IAAA,CAAA,EAAA,GAAA,cAAA,CAAe,YAAf,IAAA,GAAA,MAAA,GAAA,EAAA,CAAwB,MAAA,EAAA;AACxB,IAAA,CAAA,EAAA,GAAA,cAAA,CAAe,OAAA,KAAf,mBAAwB,iBAAA,CAAkB,QAAA,CAAA;AAG1C,IAAA,CAAA,EAAA,GAAA,UAAA,CAAW,YAAX,IAAA,GAAA,MAAA,GAAA,EAAA,CAAoB,MAAA,EAAA;AAGpB,IAAA,MAAM,cAAA,GAAA,CAAiB,EAAA,GAAA,UAAA,CAAW,OAAA,KAAX,IAAA,GAAA,MAAA,GAAA,EAAA,CAAoB,kBAAA,EAAA;AAC3C,IAAA,IAAI,cAAA,IAAkB,QAAA,CAAS,aAAA,EAAc,KAAM,eAAe,UAAA,EAAY;AAC5E,MAAA,QAAA,CAAS,aAAA,CAAc,eAAe,UAAU,CAAA;AAAA,IAClD;AAGA,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,QAAA,CAAS,MAAA,EAAO;AAAA,IAClB;AAGA,IAAA,KAAA,CAAM,QAAA,CAAS,CAAC,KAAA,KAAe;AAC7B,MAAA,IAAI,KAAA,CAAM,SAAS,SAAA,EAAW;AAC5B,QAAA,MAAM,IAAA,GAAO,WAAA,CAAY,GAAA,EAAI,GAAI,IAAA;AACjC,QAAA,MAAM,IAAA,GAAO,MAAM,QAAA,CAAS,SAAA;AAE5B,QAAA,QAAQ,KAAK,IAAA;AAAM,UACjB,KAAK,QAAA;AACH,YAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,IAAQ,IAAA,CAAK,KAAA,IAAS,CAAA,CAAA;AACzC,YAAA;AAAA,UACF,KAAK,OAAA;AACH,YAAA,KAAA,CAAM,QAAA,CAAS,CAAA,GAAI,IAAA,CAAK,GAAA,CAAI,IAAA,IAAQ,KAAK,KAAA,IAAS,CAAA,CAAE,CAAA,IAAK,IAAA,CAAK,SAAA,IAAa,GAAA,CAAA;AAC3E,YAAA;AAAA,UACF,KAAK,OAAA;AACH,YAAA,MAAM,KAAA,GAAQ,CAAA,GAAI,IAAA,CAAK,GAAA,CAAI,IAAA,IAAQ,KAAK,KAAA,IAAS,CAAA,CAAE,CAAA,IAAK,IAAA,CAAK,SAAA,IAAa,IAAA,CAAA;AAC1E,YAAA,KAAA,CAAM,KAAA,CAAM,UAAU,KAAK,CAAA;AAC3B,YAAA;AAAA;AACJ,MACF;AAAA,IACF,CAAC,CAAA;AAGD,IAAA,QAAA,CAAS,MAAA,CAAO,OAAO,MAAM,CAAA;AAG7B,IAAA,cAAA,CAAe,OAAA,GAAU,sBAAsB,OAAO,CAAA;AAAA,EACxD,CAAA,EAAG,EAAE,CAAA;AAGL,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,MAAM,eAAe,MAAM;AACzB,MAAA,IAAI,CAAC,UAAA,CAAW,OAAA,IAAW,CAAC,SAAS,OAAA,EAAS;AAE9C,MAAA,MAAM,EAAE,MAAA,EAAQ,QAAA,EAAS,GAAI,UAAA,CAAW,OAAA;AACxC,MAAA,MAAM,KAAA,GAAQ,SAAS,OAAA,CAAQ,WAAA;AAC/B,MAAA,MAAM,MAAA,GAAS,SAAS,OAAA,CAAQ,YAAA;AAEhC,MAAA,MAAA,CAAO,SAAS,KAAA,GAAQ,MAAA;AACxB,MAAA,MAAA,CAAO,sBAAA,EAAuB;AAC9B,MAAA,QAAA,CAAS,OAAA,CAAQ,OAAO,MAAM,CAAA;AAAA,IAChC,CAAA;AAEA,IAAA,MAAA,CAAO,gBAAA,CAAiB,UAAU,YAAY,CAAA;AAC9C,IAAA,OAAO,MAAM,MAAA,CAAO,mBAAA,CAAoB,QAAA,EAAU,YAAY,CAAA;AAAA,EAChE,CAAA,EAAG,EAAE,CAAA;AAGL,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,SAAA,EAAU;AAGV,IAAA,OAAO,MAAM;AAEX,MAAA,IAAI,eAAe,OAAA,EAAS;AAC1B,QAAA,oBAAA,CAAqB,eAAe,OAAO,CAAA;AAAA,MAC7C;AAGA,MAAA,IAAI,WAAW,OAAA,EAAS;AACtB,QAAA,MAAM,EAAE,KAAA,EAAO,QAAA,EAAS,GAAI,UAAA,CAAW,OAAA;AAGvC,QAAA,IAAI,QAAA,IAAY,SAAS,OAAA,EAAS;AAChC,UAAA,QAAA,CAAS,OAAA,EAAQ;AAAA,QACnB;AAGA,QAAA,KAAA,CAAM,QAAA,CAAS,CAAC,KAAA,KAAe;AAC7B,UAAA,aAAA,CAAc,KAAK,CAAA;AAAA,QACrB,CAAC,CAAA;AACD,QAAA,KAAA,CAAM,KAAA,EAAM;AAAA,MACd;AAGA,MAAA,YAAA,CAAa,eAAA,CAAgB,WAAW,OAAO,CAAA;AAAA,IACjD,CAAA;AAAA,EACF,CAAA,EAAG,CAAC,SAAS,CAAC,CAAA;AAGd,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,uBACEF,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,CAAA,mEAAA,EAAsE,SAAS,CAAA,CAAA,EAC7F,QAAA,kBAAAC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,aAAA,EACb,QAAA,EAAA;AAAA,sBAAAD,GAAAA,CAAC,GAAA,EAAA,EAAE,SAAA,EAAU,mBAAA,EAAoB,QAAA,EAAA,uCAAA,EAAqC,CAAA;AAAA,sBACtEA,GAAAA,CAAC,GAAA,EAAA,EAAE,SAAA,EAAU,yBAAwB,QAAA,EAAA,mEAAA,EAErC;AAAA,KAAA,EACF,CAAA,EACF,CAAA;AAAA,EAEJ;AAEA,EAAA,IAAI,KAAA,EAAO;AACT,IAAA,uBACEA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,CAAA,mEAAA,EAAsE,SAAS,CAAA,CAAA,EAC7F,QAAA,kBAAAC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,aAAA,EACb,QAAA,EAAA;AAAA,sBAAAD,GAAAA,CAAC,GAAA,EAAA,EAAE,SAAA,EAAU,mBAAA,EAAoB,QAAA,EAAA,yBAAA,EAAuB,CAAA;AAAA,sBACxDA,GAAAA,CAAC,GAAA,EAAA,EAAE,SAAA,EAAU,uBAAA,EAAyB,gBAAM,OAAA,EAAQ;AAAA,KAAA,EACtD,CAAA,EACF,CAAA;AAAA,EAEJ;AAEA,EAAA,uBACEC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,CAAA,8DAAA,EAAiE,SAAS,CAAA,CAAA,EACxF,QAAA,EAAA;AAAA,oBAAAD,GAAAA,CAAC,KAAA,EAAA,EAAI,GAAA,EAAK,QAAA,EAAU,WAAU,eAAA,EAAgB,CAAA;AAAA,IAE7C,SAAA,oBACCA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,+EACb,QAAA,kBAAAC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,4BAAA,EACb,QAAA,EAAA;AAAA,sBAAAD,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,2FAAA,EAA4F,CAAA;AAAA,sBAC3GA,GAAAA,CAAC,GAAA,EAAA,EAAE,SAAA,EAAU,iBAAgB,QAAA,EAAA,qBAAA,EAAmB;AAAA,KAAA,EAClD,CAAA,EACF,CAAA;AAAA,IAID,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,aAAA,IAAiB,cAAA,CAAe,2BACxDC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,mFAAA,EAAoF,QAAA,EAAA;AAAA,MAAA,OAAA;AAAA,MAC3F,cAAA,CAAe,QAAQ,MAAA;AAAO,KAAA,EACtC;AAAA,GAAA,EAEJ,CAAA;AAEJ;ACjaO,SAAS,eAAA,CAAgB;AAAA,EAC9B,MAAA;AAAA,EACA,SAAA,GAAY,EAAA;AAAA,EACZ,UAAA,GAAa,IAAA;AAAA,EACb,aAAA,GAAgB;AAClB,CAAA,EAAoF;AAClF,EAAA,MAAM,CAAC,QAAA,EAAU,WAAW,CAAA,GAAIE,QAAAA,CAAS,EAAE,CAAA,EAAG,GAAA,EAAK,CAAA,EAAG,EAAA,EAAI,CAAA;AAC1D,EAAA,MAAM,eAAeC,MAAAA,EAAe;AAEpC,EAAAC,UAAU,MAAM;AACd,IAAA,IAAI,CAAC,UAAA,EAAY;AAEjB,IAAA,MAAM,UAAU,MAAM;AACpB,MAAA,WAAA,CAAY,CAAA,IAAA,MAAS;AAAA,QACnB,GAAG,IAAA,CAAK,CAAA;AAAA,QACR,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,aAAA,GAAgB;AAAA,OAC9B,CAAE,CAAA;AACF,MAAA,YAAA,CAAa,OAAA,GAAU,sBAAsB,OAAO,CAAA;AAAA,IACtD,CAAA;AAEA,IAAA,YAAA,CAAa,OAAA,GAAU,sBAAsB,OAAO,CAAA;AAEpD,IAAA,OAAO,MAAM;AACX,MAAA,IAAI,aAAa,OAAA,EAAS;AACxB,QAAA,oBAAA,CAAqB,aAAa,OAAO,CAAA;AAAA,MAC3C;AAAA,IACF,CAAA;AAAA,EACF,CAAA,EAAG,CAAC,UAAA,EAAY,aAAa,CAAC,CAAA;AAG9B,EAAA,MAAM,mBAAmB,MAAM;AAC7B,IAAA,MAAM,SAAA,GAAY;AAAA,MAChB,WAAW,CAAA,QAAA,EAAW,QAAA,CAAS,CAAC,CAAA,aAAA,EAAgB,SAAS,CAAC,CAAA,IAAA,CAAA;AAAA,MAC1D,cAAA,EAAgB,aAAA;AAAA,MAChB,UAAA,EAAY,aAAa,MAAA,GAAS;AAAA,KACpC;AAEA,IAAA,QAAQ,MAAA;AAAQ,MACd,KAAK,aAAA;AACH,QAAA,uBACEJ,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,oBAAA,EAAqB,OAAO,SAAA,EACzC,QAAA,EAAA;AAAA,0BAAAD,GAAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cAAI,SAAA,EAAU,6CAAA;AAAA,cACV,KAAA,EAAO;AAAA,gBACL,QAAA,EAAU,+DAAA;AAAA,gBACV,UAAA,EAAY;AAAA;AACd;AAAA,WAAG;AAAA,0BACRA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,sDAAA,EAAuD;AAAA,SAAA,EACxE,CAAA;AAAA,MAGJ,KAAK,WAAA;AACH,QAAA,uBACEC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,oBAAA,EAAqB,OAAO,SAAA,EACzC,QAAA,EAAA;AAAA,0BAAAD,GAAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cAAI,SAAA,EAAU,kEAAA;AAAA,cACV,KAAA,EAAO;AAAA,gBACL,UAAA,EAAY;AAAA;AACd;AAAA,WAAG;AAAA,0BACRA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,uDAAA,EAAwD,CAAA;AAAA,0BACvEA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,mEAAA,EAAoE;AAAA,SAAA,EACrF,CAAA;AAAA,MAGJ,KAAK,YAAA;AACH,QAAA,uBACEC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,oBAAA,EAAqB,OAAO,SAAA,EACzC,QAAA,EAAA;AAAA,0BAAAD,GAAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cAAI,SAAA,EAAU,uCAAA;AAAA,cACV,KAAA,EAAO;AAAA,gBACL,UAAA,EAAY;AAAA;AACd;AAAA,WAAG;AAAA,0BACRA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,sCAAA,EACb,0BAAAA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,qDAAA,EAAsD,CAAA,EACvE;AAAA,SAAA,EACF,CAAA;AAAA,MAGJ,KAAK,YAAA;AACH,QAAA,uBACEA,GAAAA,CAAC,KAAA,EAAA,EAAI,WAAU,oBAAA,EAAqB,KAAA,EAAO,WACzC,QAAA,kBAAAA,GAAAA;AAAA,UAAC,KAAA;AAAA,UAAA;AAAA,YAAI,SAAA,EAAU,kBAAA;AAAA,YACV,KAAA,EAAO;AAAA,cACL,UAAA,EAAY,yIAAA;AAAA,cACZ,QAAA,EAAU;AAAA;AACZ;AAAA,SAAG,EACV,CAAA;AAAA,MAGJ,KAAK,SAAA;AACH,QAAA,uBACEC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,oBAAA,EAAqB,OAAO,SAAA,EACzC,QAAA,EAAA;AAAA,0BAAAD,GAAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cAAI,SAAA,EAAU,uDAAA;AAAA,cACV,KAAA,EAAO;AAAA,gBACL,UAAA,EAAY;AAAA;AACd;AAAA,WAAG;AAAA,0BACRA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,+DAAA,EAAgE,CAAA;AAAA,0BAC/EA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,+DAAA,EAAgE,CAAA;AAAA,0BAC/EA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,gEAAA,EAAiE,CAAA;AAAA,0BAChFA,GAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,gEAAA,EAAiE;AAAA,SAAA,EAClF,CAAA;AAAA,MAGJ;AACE,QAAA,uBACEA,GAAAA,CAAC,KAAA,EAAA,EAAI,WAAU,oBAAA,EAAqB,KAAA,EAAO,WACzC,QAAA,kBAAAA,GAAAA;AAAA,UAAC,KAAA;AAAA,UAAA;AAAA,YAAI,SAAA,EAAU,sCAAA;AAAA,YACV,KAAA,EAAO;AAAA,cACL,UAAA,EAAY;AAAA;AACd;AAAA,SAAG,EACV,CAAA;AAAA;AAEN,EACF,CAAA;AAEA,EAAA,uBACEC,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,CAAA,wCAAA,EAA2C,SAAS,CAAA,CAAA,EAAI,KAAA,EAAO,EAAE,WAAA,EAAa,QAAA,EAAS,EACrG,QAAA,EAAA;AAAA,oBAAAA,IAAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAU,kDAAA,EAAmD,QAAA,EAAA;AAAA,MAAA,MAAA;AAAA,MAC3D;AAAA,KAAA,EACP,CAAA;AAAA,IACC,gBAAA;AAAiB,GAAA,EACpB,CAAA;AAEJ;AAGA,IAAM,gBAAA,GAAmB;AAAA;AAAA;AAAA;AAAA,CAAA;AAMzB,IAAI,OAAO,QAAA,KAAa,WAAA,IAAe,CAAC,QAAA,CAAS,aAAA,CAAc,qBAAqB,CAAA,EAAG;AACrF,EAAA,MAAM,KAAA,GAAQ,QAAA,CAAS,aAAA,CAAc,OAAO,CAAA;AAC5C,EAAA,KAAA,CAAM,EAAA,GAAK,oBAAA;AACX,EAAA,KAAA,CAAM,WAAA,GAAc,gBAAA;AACpB,EAAA,QAAA,CAAS,IAAA,CAAK,YAAY,KAAK,CAAA;AACjC","file":"index.mjs","sourcesContent":["import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merge class names with tailwind-merge to handle conflicts\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}","import React from 'react';\nimport { cn } from './utils';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'danger';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  icon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n}\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className,\n    variant = 'primary',\n    size = 'md',\n    loading = false,\n    icon,\n    iconPosition = 'left',\n    children,\n    disabled,\n    ...props \n  }, ref) => {\n    const variants = {\n      primary: [\n        'bg-primary-500 text-white',\n        'hover:bg-primary-600',\n        'focus:ring-primary-500',\n        'disabled:bg-primary-500/50'\n      ],\n      secondary: [\n        'bg-white dark:bg-gray-800',\n        'text-gray-900 dark:text-gray-100',\n        'border border-gray-300 dark:border-gray-600',\n        'hover:bg-gray-50 dark:hover:bg-gray-700',\n        'focus:ring-gray-500'\n      ],\n      ghost: [\n        'text-gray-700 dark:text-gray-300',\n        'hover:bg-gray-100 dark:hover:bg-gray-800',\n        'focus:ring-gray-500'\n      ],\n      danger: [\n        'bg-error-light dark:bg-error-dark text-white',\n        'hover:bg-red-600 dark:hover:bg-red-700',\n        'focus:ring-red-500'\n      ]\n    };\n\n    const sizes = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2 text-base',\n      lg: 'px-6 py-3 text-lg'\n    };\n\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          // Base styles\n          'inline-flex items-center justify-center rounded-md font-medium',\n          'transition-all duration-200',\n          'focus:outline-none focus:ring-2 focus:ring-offset-2',\n          'disabled:cursor-not-allowed disabled:opacity-50',\n          \n          // Variant styles\n          variants[variant],\n          \n          // Size styles\n          sizes[size],\n          \n          // Loading state\n          loading && 'relative cursor-wait',\n          \n          className\n        )}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        <span className={cn(\n          'inline-flex items-center',\n          loading && 'invisible'\n        )}>\n          {icon && iconPosition === 'left' && (\n            <span className=\"mr-2\">{icon}</span>\n          )}\n          {children}\n          {icon && iconPosition === 'right' && (\n            <span className=\"ml-2\">{icon}</span>\n          )}\n        </span>\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';","import React from 'react';\nimport { cn } from './utils';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'chat' | 'hover';\n  padding?: 'none' | 'sm' | 'md' | 'lg';\n}\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, variant = 'default', padding = 'md', children, ...props }, ref) => {\n    const variants = {\n      default: [\n        'bg-white dark:bg-gray-800',\n        'border border-gray-200 dark:border-gray-700',\n        'shadow-sm'\n      ],\n      chat: [\n        'bg-gray-50 dark:bg-gray-700',\n        'border border-gray-100 dark:border-gray-600',\n        'shadow-chat'\n      ],\n      hover: [\n        'bg-white dark:bg-gray-800',\n        'border border-gray-200 dark:border-gray-700',\n        'shadow-sm hover:shadow-md',\n        'transition-shadow duration-200',\n        'cursor-pointer'\n      ]\n    };\n\n    const paddings = {\n      none: '',\n      sm: 'p-3',\n      md: 'p-4',\n      lg: 'p-6'\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'rounded-lg',\n          variants[variant],\n          paddings[padding],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCard.displayName = 'Card';\n\n// Card subcomponents\nexport const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('mb-4 pb-4 border-b border-gray-200 dark:border-gray-700', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nexport const CardTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn('text-lg font-semibold text-gray-900 dark:text-gray-100', className)}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nexport const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('text-gray-700 dark:text-gray-300', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';","import React from 'react';\nimport { cn } from './utils';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n  hint?: string;\n  icon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, label, error, hint, icon, iconPosition = 'left', ...props }, ref) => {\n    return (\n      <div className=\"w-full\">\n        {label && (\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            {label}\n          </label>\n        )}\n        \n        <div className=\"relative\">\n          {icon && iconPosition === 'left' && (\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <span className=\"text-gray-500 dark:text-gray-400 sm:text-sm\">\n                {icon}\n              </span>\n            </div>\n          )}\n          \n          <input\n            ref={ref}\n            className={cn(\n              // Base styles\n              'block w-full rounded-md border-0 py-2.5 text-gray-900 dark:text-gray-100',\n              'bg-white dark:bg-gray-800',\n              'ring-1 ring-inset',\n              'placeholder:text-gray-400 dark:placeholder:text-gray-500',\n              'focus:ring-2 focus:ring-inset',\n              'sm:text-sm sm:leading-6',\n              'transition-colors duration-200',\n              \n              // Normal state\n              !error && [\n                'ring-gray-300 dark:ring-gray-600',\n                'focus:ring-primary-500'\n              ],\n              \n              // Error state\n              error && [\n                'ring-red-300 dark:ring-red-600',\n                'focus:ring-red-500'\n              ],\n              \n              // Icon padding\n              icon && iconPosition === 'left' && 'pl-10',\n              icon && iconPosition === 'right' && 'pr-10',\n              !icon && 'px-3',\n              \n              className\n            )}\n            aria-invalid={!!error}\n            aria-describedby={error ? 'error-message' : hint ? 'hint-message' : undefined}\n            {...props}\n          />\n          \n          {icon && iconPosition === 'right' && (\n            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n              <span className=\"text-gray-500 dark:text-gray-400 sm:text-sm\">\n                {icon}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {error && (\n          <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\" id=\"error-message\">\n            {error}\n          </p>\n        )}\n        \n        {hint && !error && (\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\" id=\"hint-message\">\n            {hint}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\n// Textarea variant\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string;\n  error?: string;\n  hint?: string;\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, label, error, hint, ...props }, ref) => {\n    return (\n      <div className=\"w-full\">\n        {label && (\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            {label}\n          </label>\n        )}\n        \n        <textarea\n          ref={ref}\n          className={cn(\n            // Base styles\n            'block w-full rounded-md border-0 px-3 py-2.5',\n            'text-gray-900 dark:text-gray-100',\n            'bg-white dark:bg-gray-800',\n            'ring-1 ring-inset',\n            'placeholder:text-gray-400 dark:placeholder:text-gray-500',\n            'focus:ring-2 focus:ring-inset',\n            'sm:text-sm sm:leading-6',\n            'transition-colors duration-200',\n            'resize-y min-h-[80px]',\n            \n            // Normal state\n            !error && [\n              'ring-gray-300 dark:ring-gray-600',\n              'focus:ring-primary-500'\n            ],\n            \n            // Error state\n            error && [\n              'ring-red-300 dark:ring-red-600',\n              'focus:ring-red-500'\n            ],\n            \n            className\n          )}\n          aria-invalid={!!error}\n          aria-describedby={error ? 'error-message' : hint ? 'hint-message' : undefined}\n          {...props}\n        />\n        \n        {error && (\n          <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\" id=\"error-message\">\n            {error}\n          </p>\n        )}\n        \n        {hint && !error && (\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\" id=\"hint-message\">\n            {hint}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nTextarea.displayName = 'Textarea';","/**\n * Three.js loader utilities\n */\n\nlet threeModule: any = null;\nlet loadPromise: Promise<any> | null = null;\n\n/**\n * Load Three.js library dynamically\n */\nexport async function loadThree(): Promise<any> {\n  // Return cached module if already loaded\n  if (threeModule) {\n    return threeModule;\n  }\n\n  // Return existing promise if loading is in progress\n  if (loadPromise) {\n    return loadPromise;\n  }\n\n  loadPromise = new Promise(async (resolve, reject) => {\n    try {\n      // Try to load from npm first\n      threeModule = await import('three');\n      resolve(threeModule);\n    } catch (error) {\n      console.warn('Failed to load Three.js from npm, trying CDN fallback:', error);\n      \n      // Fallback to CDN\n      try {\n        await loadThreeFromCDN();\n        threeModule = (window as any).THREE;\n        if (!threeModule) {\n          throw new Error('Three.js failed to load from CDN');\n        }\n        resolve(threeModule);\n      } catch (cdnError) {\n        reject(cdnError);\n      }\n    }\n  });\n\n  return loadPromise;\n}\n\n/**\n * Load Three.js from CDN\n */\nasync function loadThreeFromCDN(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Check if already loaded\n    if ((window as any).THREE) {\n      resolve();\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.src = 'https://unpkg.com/three@0.160.0/build/three.min.js';\n    script.async = true;\n    \n    script.onload = () => {\n      if (!(window as any).THREE) {\n        reject(new Error('Three.js loaded but not available on window'));\n      } else {\n        resolve();\n      }\n    };\n    \n    script.onerror = () => {\n      reject(new Error('Failed to load Three.js from CDN'));\n    };\n    \n    document.head.appendChild(script);\n  });\n}\n\n/**\n * Load OrbitControls\n */\nexport async function loadOrbitControls(THREE: any): Promise<any> {\n  try {\n    // Try to load from npm\n    const { OrbitControls } = await import('three/examples/jsm/controls/OrbitControls.js');\n    return OrbitControls;\n  } catch (error) {\n    console.warn('Failed to load OrbitControls from npm:', error);\n    \n    // For CDN version, OrbitControls might need manual implementation\n    // Return a basic implementation\n    return createBasicOrbitControls(THREE);\n  }\n}\n\n/**\n * Create basic orbit controls implementation\n */\nfunction createBasicOrbitControls(THREE: any) {\n  return class BasicOrbitControls {\n    camera: any;\n    domElement: HTMLElement;\n    enabled = true;\n    enableDamping = true;\n    dampingFactor = 0.05;\n    enableZoom = true;\n    enableRotate = true;\n    enablePan = true;\n    \n    private spherical = new THREE.Spherical();\n    private sphericalDelta = new THREE.Spherical();\n    private scale = 1;\n    private panOffset = new THREE.Vector3();\n    private rotateStart = new THREE.Vector2();\n    private rotateEnd = new THREE.Vector2();\n    private rotateDelta = new THREE.Vector2();\n\n    constructor(camera: any, domElement: HTMLElement) {\n      this.camera = camera;\n      this.domElement = domElement;\n      \n      this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));\n      this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));\n      this.domElement.addEventListener('touchstart', this.onTouchStart.bind(this));\n      this.domElement.addEventListener('touchmove', this.onTouchMove.bind(this));\n    }\n\n    update() {\n      const position = this.camera.position;\n      \n      // Apply spherical coordinates\n      this.spherical.setFromVector3(position);\n      this.spherical.theta += this.sphericalDelta.theta;\n      this.spherical.phi += this.sphericalDelta.phi;\n      \n      // Restrict phi to be between desired limits\n      this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi));\n      \n      this.spherical.radius *= this.scale;\n      this.spherical.radius = Math.max(2, Math.min(20, this.spherical.radius));\n      \n      position.setFromSpherical(this.spherical);\n      position.add(this.panOffset);\n      \n      this.camera.lookAt(0, 0, 0);\n      \n      // Damping\n      if (this.enableDamping) {\n        this.sphericalDelta.theta *= (1 - this.dampingFactor);\n        this.sphericalDelta.phi *= (1 - this.dampingFactor);\n      } else {\n        this.sphericalDelta.set(0, 0, 0);\n      }\n      \n      this.scale = 1;\n      this.panOffset.set(0, 0, 0);\n    }\n\n    private onMouseDown(event: MouseEvent) {\n      if (!this.enabled || !this.enableRotate) return;\n      \n      this.rotateStart.set(event.clientX, event.clientY);\n      \n      document.addEventListener('mousemove', this.onMouseMove.bind(this));\n      document.addEventListener('mouseup', this.onMouseUp.bind(this));\n    }\n\n    private onMouseMove(event: MouseEvent) {\n      if (!this.enabled || !this.enableRotate) return;\n      \n      this.rotateEnd.set(event.clientX, event.clientY);\n      this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart);\n      \n      const element = this.domElement;\n      this.sphericalDelta.theta -= 2 * Math.PI * this.rotateDelta.x / element.clientHeight;\n      this.sphericalDelta.phi -= 2 * Math.PI * this.rotateDelta.y / element.clientHeight;\n      \n      this.rotateStart.copy(this.rotateEnd);\n      this.update();\n    }\n\n    private onMouseUp() {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n\n    private onMouseWheel(event: WheelEvent) {\n      if (!this.enabled || !this.enableZoom) return;\n      \n      event.preventDefault();\n      \n      if (event.deltaY < 0) {\n        this.scale *= 0.95;\n      } else {\n        this.scale *= 1.05;\n      }\n      \n      this.update();\n    }\n\n    private onTouchStart(event: TouchEvent) {\n      if (!this.enabled) return;\n      \n      if (event.touches.length === 1 && this.enableRotate) {\n        this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      }\n    }\n\n    private onTouchMove(event: TouchEvent) {\n      if (!this.enabled) return;\n      \n      event.preventDefault();\n      \n      if (event.touches.length === 1 && this.enableRotate) {\n        this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n        this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart);\n        \n        const element = this.domElement;\n        this.sphericalDelta.theta -= 2 * Math.PI * this.rotateDelta.x / element.clientHeight;\n        this.sphericalDelta.phi -= 2 * Math.PI * this.rotateDelta.y / element.clientHeight;\n        \n        this.rotateStart.copy(this.rotateEnd);\n        this.update();\n      }\n    }\n\n    dispose() {\n      this.domElement.removeEventListener('mousedown', this.onMouseDown);\n      this.domElement.removeEventListener('wheel', this.onMouseWheel);\n      this.domElement.removeEventListener('touchstart', this.onTouchStart);\n      this.domElement.removeEventListener('touchmove', this.onTouchMove);\n    }\n  };\n}","/**\n * WebGL detection and capability utilities\n */\n\nexport interface WebGLCapabilities {\n  supported: boolean;\n  version: 1 | 2 | 0;\n  maxTextureSize: number;\n  maxCubeMapSize: number;\n  maxRenderbufferSize: number;\n  maxVertexAttributes: number;\n  maxVertexTextureImageUnits: number;\n  maxTextureImageUnits: number;\n  maxFragmentUniformVectors: number;\n  maxVertexUniformVectors: number;\n  renderer: string;\n  vendor: string;\n}\n\n/**\n * Check if WebGL is supported\n */\nexport function checkWebGLSupport(): boolean {\n  try {\n    const canvas = document.createElement('canvas');\n    return !!(\n      window.WebGLRenderingContext &&\n      (canvas.getContext('webgl2') || \n       canvas.getContext('webgl') || \n       canvas.getContext('experimental-webgl'))\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Get detailed WebGL capabilities\n */\nexport function getWebGLCapabilities(): WebGLCapabilities {\n  const capabilities: WebGLCapabilities = {\n    supported: false,\n    version: 0,\n    maxTextureSize: 0,\n    maxCubeMapSize: 0,\n    maxRenderbufferSize: 0,\n    maxVertexAttributes: 0,\n    maxVertexTextureImageUnits: 0,\n    maxTextureImageUnits: 0,\n    maxFragmentUniformVectors: 0,\n    maxVertexUniformVectors: 0,\n    renderer: 'unknown',\n    vendor: 'unknown'\n  };\n\n  try {\n    const canvas = document.createElement('canvas');\n    let gl = canvas.getContext('webgl2');\n    let version = 2;\n\n    if (!gl) {\n      gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl') as any;\n      version = 1;\n    }\n\n    if (!gl) {\n      return capabilities;\n    }\n\n    capabilities.supported = true;\n    capabilities.version = version as 1 | 2;\n    \n    // Get capabilities\n    capabilities.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    capabilities.maxCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    capabilities.maxRenderbufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n    capabilities.maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    capabilities.maxVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    capabilities.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    capabilities.maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n    capabilities.maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\n    // Get renderer info\n    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    if (debugInfo) {\n      capabilities.renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\n      capabilities.vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\n    }\n\n    // Clean up\n    const loseContext = gl.getExtension('WEBGL_lose_context');\n    if (loseContext) {\n      loseContext.loseContext();\n    }\n\n  } catch (e) {\n    console.error('Error detecting WebGL capabilities:', e);\n  }\n\n  return capabilities;\n}\n\n/**\n * Check if device is mobile\n */\nexport function isMobileDevice(): boolean {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n}\n\n/**\n * Get recommended quality settings based on device capabilities\n */\nexport function getQualitySettings(capabilities: WebGLCapabilities) {\n  const isMobile = isMobileDevice();\n  const hasHighEndGPU = capabilities.maxTextureSize >= 8192;\n\n  if (!capabilities.supported) {\n    return null;\n  }\n\n  if (isMobile || capabilities.maxTextureSize < 4096) {\n    return {\n      pixelRatio: Math.min(window.devicePixelRatio, 1.5),\n      shadowMapSize: 512,\n      antialias: false,\n      quality: 'low'\n    };\n  }\n\n  if (hasHighEndGPU && capabilities.version === 2) {\n    return {\n      pixelRatio: window.devicePixelRatio,\n      shadowMapSize: 2048,\n      antialias: true,\n      quality: 'high'\n    };\n  }\n\n  return {\n    pixelRatio: Math.min(window.devicePixelRatio, 2),\n    shadowMapSize: 1024,\n    antialias: true,\n    quality: 'medium'\n  };\n}","/**\n * Performance monitoring and optimization utilities for 3D rendering\n */\n\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = performance.now();\n  private fps = 60;\n  private frameTimeHistory: number[] = [];\n  private readonly historySize = 60;\n  \n  private memoryUsage = {\n    geometries: 0,\n    textures: 0,\n    total: 0\n  };\n\n  /**\n   * Update FPS calculation\n   */\n  update(): void {\n    this.frameCount++;\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n\n    if (deltaTime >= 1000) {\n      this.fps = Math.round((this.frameCount * 1000) / deltaTime);\n      this.frameCount = 0;\n      this.lastTime = currentTime;\n    }\n\n    // Track frame time history\n    this.frameTimeHistory.push(deltaTime);\n    if (this.frameTimeHistory.length > this.historySize) {\n      this.frameTimeHistory.shift();\n    }\n  }\n\n  /**\n   * Get current FPS\n   */\n  getFPS(): number {\n    return this.fps;\n  }\n\n  /**\n   * Get average frame time\n   */\n  getAverageFrameTime(): number {\n    if (this.frameTimeHistory.length === 0) return 0;\n    const sum = this.frameTimeHistory.reduce((a, b) => a + b, 0);\n    return sum / this.frameTimeHistory.length;\n  }\n\n  /**\n   * Check if performance is below threshold\n   */\n  isPerformanceLow(threshold = 30): boolean {\n    return this.fps < threshold;\n  }\n\n  /**\n   * Update memory usage stats\n   */\n  updateMemoryUsage(renderer: any): void {\n    if (!renderer || !renderer.info) return;\n\n    const info = renderer.info;\n    this.memoryUsage = {\n      geometries: info.memory.geometries || 0,\n      textures: info.memory.textures || 0,\n      total: info.memory.geometries + info.memory.textures\n    };\n  }\n\n  /**\n   * Get memory usage stats\n   */\n  getMemoryUsage() {\n    return { ...this.memoryUsage };\n  }\n\n  /**\n   * Get performance report\n   */\n  getReport() {\n    return {\n      fps: this.fps,\n      averageFrameTime: this.getAverageFrameTime(),\n      memory: this.getMemoryUsage(),\n      isLowPerformance: this.isPerformanceLow()\n    };\n  }\n}\n\n/**\n * Adaptive quality manager\n */\nexport class AdaptiveQuality {\n  private qualityLevel: 'low' | 'medium' | 'high' = 'medium';\n  private monitor: PerformanceMonitor;\n  private autoAdjust = true;\n  private adjustmentCooldown = 0;\n  private readonly cooldownFrames = 120; // 2 seconds at 60fps\n\n  constructor(monitor: PerformanceMonitor, initialQuality?: 'low' | 'medium' | 'high') {\n    this.monitor = monitor;\n    if (initialQuality) {\n      this.qualityLevel = initialQuality;\n    }\n  }\n\n  /**\n   * Update quality based on performance\n   */\n  update(): void {\n    if (!this.autoAdjust || this.adjustmentCooldown > 0) {\n      this.adjustmentCooldown--;\n      return;\n    }\n\n    const fps = this.monitor.getFPS();\n    \n    // Decrease quality if FPS is too low\n    if (fps < 25 && this.qualityLevel !== 'low') {\n      this.decreaseQuality();\n      this.adjustmentCooldown = this.cooldownFrames;\n    }\n    // Increase quality if FPS is consistently high\n    else if (fps > 55 && this.qualityLevel !== 'high') {\n      this.increaseQuality();\n      this.adjustmentCooldown = this.cooldownFrames;\n    }\n  }\n\n  /**\n   * Decrease quality level\n   */\n  decreaseQuality(): void {\n    if (this.qualityLevel === 'high') {\n      this.qualityLevel = 'medium';\n    } else if (this.qualityLevel === 'medium') {\n      this.qualityLevel = 'low';\n    }\n  }\n\n  /**\n   * Increase quality level\n   */\n  increaseQuality(): void {\n    if (this.qualityLevel === 'low') {\n      this.qualityLevel = 'medium';\n    } else if (this.qualityLevel === 'medium') {\n      this.qualityLevel = 'high';\n    }\n  }\n\n  /**\n   * Get current quality settings\n   */\n  getQualitySettings() {\n    const settings = {\n      low: {\n        pixelRatio: 1,\n        shadowMapSize: 512,\n        antialias: false,\n        shadowsEnabled: false,\n        postProcessing: false,\n        maxLights: 2\n      },\n      medium: {\n        pixelRatio: Math.min(window.devicePixelRatio, 2),\n        shadowMapSize: 1024,\n        antialias: true,\n        shadowsEnabled: true,\n        postProcessing: false,\n        maxLights: 4\n      },\n      high: {\n        pixelRatio: window.devicePixelRatio,\n        shadowMapSize: 2048,\n        antialias: true,\n        shadowsEnabled: true,\n        postProcessing: true,\n        maxLights: 8\n      }\n    };\n\n    return settings[this.qualityLevel];\n  }\n\n  /**\n   * Get current quality level\n   */\n  getQualityLevel() {\n    return this.qualityLevel;\n  }\n\n  /**\n   * Set auto-adjust enabled/disabled\n   */\n  setAutoAdjust(enabled: boolean): void {\n    this.autoAdjust = enabled;\n  }\n}\n\n/**\n * Resource disposal helper\n */\nexport function disposeObject(object: any): void {\n  if (!object) return;\n\n  // Dispose geometry\n  if (object.geometry) {\n    object.geometry.dispose();\n  }\n\n  // Dispose material(s)\n  if (object.material) {\n    const materials = Array.isArray(object.material) ? object.material : [object.material];\n    materials.forEach((material: any) => {\n      // Dispose textures\n      Object.keys(material).forEach(key => {\n        const value = material[key];\n        if (value && typeof value.dispose === 'function') {\n          value.dispose();\n        }\n      });\n      material.dispose();\n    });\n  }\n\n  // Recursively dispose children\n  if (object.children) {\n    object.children.forEach((child: any) => disposeObject(child));\n  }\n}\n\n/**\n * Dispose entire Three.js scene\n */\nexport function disposeScene(scene: any, renderer: any): void {\n  if (scene) {\n    scene.traverse((object: any) => disposeObject(object));\n    scene.clear();\n  }\n\n  if (renderer) {\n    renderer.dispose();\n    renderer.forceContextLoss();\n  }\n}","/**\n * WebGL Renderer Pool\n * Manages a pool of renderers to avoid WebGL context limit\n */\n\ninterface RendererInfo {\n  renderer: any;\n  canvas: HTMLCanvasElement;\n  useCount: number;\n  lastUsed: number;\n}\n\nclass RendererPool {\n  private static instance: RendererPool;\n  private renderers: Map<string, RendererInfo> = new Map();\n  private maxRenderers = 8; // WebGL typically limits to 16 contexts, we'll use half\n  \n  private constructor() {}\n\n  static getInstance(): RendererPool {\n    if (!RendererPool.instance) {\n      RendererPool.instance = new RendererPool();\n    }\n    return RendererPool.instance;\n  }\n\n  /**\n   * Get or create a renderer for the given container\n   */\n  async getRenderer(\n    containerId: string,\n    container: HTMLElement,\n    THREE: any,\n    options: {\n      antialias?: boolean;\n      alpha?: boolean;\n      powerPreference?: string;\n      pixelRatio?: number;\n    } = {}\n  ): Promise<{ renderer: any; canvas: HTMLCanvasElement; isNew: boolean }> {\n    // Check if we already have a renderer for this container\n    const existing = this.renderers.get(containerId);\n    if (existing) {\n      existing.useCount++;\n      existing.lastUsed = Date.now();\n      return { \n        renderer: existing.renderer, \n        canvas: existing.canvas,\n        isNew: false \n      };\n    }\n\n    // If we're at the limit, remove the least recently used\n    if (this.renderers.size >= this.maxRenderers) {\n      this.removeLeastRecentlyUsed();\n    }\n\n    // Create new renderer\n    const canvas = document.createElement('canvas');\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvas.style.display = 'block';\n    \n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: options.antialias ?? true,\n      alpha: options.alpha ?? true,\n      powerPreference: options.powerPreference ?? 'high-performance',\n      preserveDrawingBuffer: true,\n    });\n\n    renderer.setPixelRatio(options.pixelRatio ?? Math.min(window.devicePixelRatio, 2));\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    // Store renderer info\n    const info: RendererInfo = {\n      renderer,\n      canvas,\n      useCount: 1,\n      lastUsed: Date.now(),\n    };\n\n    this.renderers.set(containerId, info);\n    container.appendChild(canvas);\n\n    return { renderer, canvas, isNew: true };\n  }\n\n  /**\n   * Release a renderer\n   */\n  releaseRenderer(containerId: string): void {\n    const info = this.renderers.get(containerId);\n    if (info) {\n      info.useCount--;\n      \n      // If no longer in use, mark for potential removal\n      if (info.useCount <= 0) {\n        info.lastUsed = Date.now() - 60000; // Mark as old\n      }\n    }\n  }\n\n  /**\n   * Dispose a renderer completely\n   */\n  disposeRenderer(containerId: string): void {\n    const info = this.renderers.get(containerId);\n    if (info) {\n      // Dispose Three.js resources\n      info.renderer.dispose();\n      info.renderer.forceContextLoss();\n      \n      // Remove canvas from DOM\n      if (info.canvas.parentElement) {\n        info.canvas.parentElement.removeChild(info.canvas);\n      }\n      \n      // Remove from pool\n      this.renderers.delete(containerId);\n    }\n  }\n\n  /**\n   * Remove least recently used renderer\n   */\n  private removeLeastRecentlyUsed(): void {\n    let oldestId: string | null = null;\n    let oldestTime = Date.now();\n\n    // Find renderer with oldest lastUsed time and no active uses\n    for (const [id, info] of this.renderers) {\n      if (info.useCount === 0 && info.lastUsed < oldestTime) {\n        oldestTime = info.lastUsed;\n        oldestId = id;\n      }\n    }\n\n    // If all are in use, force remove the oldest one\n    if (!oldestId) {\n      for (const [id, info] of this.renderers) {\n        if (info.lastUsed < oldestTime) {\n          oldestTime = info.lastUsed;\n          oldestId = id;\n        }\n      }\n    }\n\n    if (oldestId) {\n      console.warn(`Disposing old WebGL context: ${oldestId}`);\n      this.disposeRenderer(oldestId);\n    }\n  }\n\n  /**\n   * Dispose all renderers\n   */\n  disposeAll(): void {\n    for (const id of this.renderers.keys()) {\n      this.disposeRenderer(id);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      activeRenderers: this.renderers.size,\n      maxRenderers: this.maxRenderers,\n      renderers: Array.from(this.renderers.entries()).map(([id, info]) => ({\n        id,\n        useCount: info.useCount,\n        age: Date.now() - info.lastUsed,\n      })),\n    };\n  }\n}\n\nexport const rendererPool = RendererPool.getInstance();","/**\n * Earthen Pot MFC model\n * Traditional clay pot design for rural applications\n */\n\nexport function createEarthenPot(THREE: any) {\n  const group = new THREE.Group();\n\n  // Main pot body (using lathe geometry for realistic pot shape)\n  const points = [];\n  const segments = 10;\n  \n  // Create pot profile\n  for (let i = 0; i <= segments; i++) {\n    const t = i / segments;\n    const y = t * 2 - 0.5;\n    \n    // Shape function for pot profile\n    let radius;\n    if (t < 0.3) {\n      // Bottom section\n      radius = 0.3 + t * 0.5;\n    } else if (t < 0.8) {\n      // Wide middle section\n      radius = 0.8 + Math.sin((t - 0.3) * Math.PI) * 0.2;\n    } else {\n      // Neck\n      radius = 1 - (t - 0.8) * 2;\n    }\n    \n    points.push(new THREE.Vector2(radius, y));\n  }\n\n  // Create pot geometry\n  const potGeometry = new THREE.LatheGeometry(points, 32);\n  \n  // Create pot material (terracotta)\n  const potMaterial = new THREE.MeshStandardMaterial({\n    color: 0xcc6633,\n    roughness: 0.9,\n    metalness: 0,\n  });\n  \n  const pot = new THREE.Mesh(potGeometry, potMaterial);\n  pot.castShadow = true;\n  pot.receiveShadow = true;\n  group.add(pot);\n\n  // Inner chamber (anode)\n  const innerChamberGeometry = new THREE.CylinderGeometry(0.6, 0.6, 1.2, 32);\n  const innerChamberMaterial = new THREE.MeshStandardMaterial({\n    color: 0x1a1a1a,\n    roughness: 0.8,\n    metalness: 0.1,\n  });\n  \n  const innerChamber = new THREE.Mesh(innerChamberGeometry, innerChamberMaterial);\n  innerChamber.position.y = -0.2;\n  group.add(innerChamber);\n\n  // Carbon cloth electrodes\n  const electrodeGeometry = new THREE.PlaneGeometry(0.8, 0.8);\n  const electrodeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x0a0a0a,\n    roughness: 0.9,\n    metalness: 0.1,\n    side: THREE.DoubleSide,\n  });\n\n  // Anode (inner electrode)\n  const anode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n  anode.position.set(0, 0, 0);\n  anode.rotation.y = Math.PI / 4;\n  group.add(anode);\n\n  // Cathode (outer electrode - curved to follow pot shape)\n  const cathodeGeometry = new THREE.RingGeometry(0.7, 0.9, 32);\n  const cathode = new THREE.Mesh(cathodeGeometry, electrodeMaterial);\n  cathode.position.y = 0.3;\n  cathode.rotation.x = -Math.PI / 2;\n  group.add(cathode);\n\n  // Wire connections\n  const wireGeometry = new THREE.CylinderGeometry(0.01, 0.01, 0.5);\n  const wireMaterial = new THREE.MeshStandardMaterial({\n    color: 0xb87333,\n    metalness: 0.8,\n    roughness: 0.3,\n  });\n\n  // Anode wire\n  const anodeWire = new THREE.Mesh(wireGeometry, wireMaterial);\n  anodeWire.position.set(0, 0.8, 0);\n  group.add(anodeWire);\n\n  // Cathode wire\n  const cathodeWire = new THREE.Mesh(wireGeometry, wireMaterial);\n  cathodeWire.position.set(0.7, 0.8, 0);\n  cathodeWire.rotation.z = Math.PI / 6;\n  group.add(cathodeWire);\n\n  // Water/substrate level indicator\n  const waterGeometry = new THREE.CylinderGeometry(0.58, 0.58, 0.8, 32);\n  const waterMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x4682b4,\n    transparent: true,\n    opacity: 0.3,\n    roughness: 0,\n    metalness: 0,\n    clearcoat: 1,\n    clearcoatRoughness: 0,\n  });\n  \n  const water = new THREE.Mesh(waterGeometry, waterMaterial);\n  water.position.y = -0.3;\n  group.add(water);\n\n  // Add some decorative elements (traditional patterns)\n  const patternGeometry = new THREE.TorusGeometry(0.9, 0.02, 8, 32);\n  const patternMaterial = new THREE.MeshStandardMaterial({\n    color: 0xa0522d,\n    roughness: 0.8,\n    metalness: 0,\n  });\n\n  const pattern1 = new THREE.Mesh(patternGeometry, patternMaterial);\n  pattern1.position.y = 0.5;\n  pattern1.rotation.x = Math.PI / 2;\n  group.add(pattern1);\n\n  const pattern2 = new THREE.Mesh(patternGeometry, patternMaterial);\n  pattern2.position.y = 0;\n  pattern2.rotation.x = Math.PI / 2;\n  pattern2.scale.setScalar(1.1);\n  group.add(pattern2);\n\n  return group;\n}","/**\n * Cardboard MFC model\n * Low-cost educational prototype\n */\n\nexport function createCardboard(THREE: any) {\n  const group = new THREE.Group();\n\n  // Simple box structure\n  const boxGeometry = new THREE.BoxGeometry(2, 1.5, 1);\n  const boxMaterial = new THREE.MeshStandardMaterial({\n    color: 0xd4a574,\n    roughness: 0.8,\n    metalness: 0,\n  });\n  \n  const box = new THREE.Mesh(boxGeometry, boxMaterial);\n  box.castShadow = true;\n  box.receiveShadow = true;\n  group.add(box);\n\n  // Separator membrane\n  const separatorGeometry = new THREE.PlaneGeometry(1.8, 1.3);\n  const separatorMaterial = new THREE.MeshStandardMaterial({\n    color: 0xffffff,\n    roughness: 0.6,\n    metalness: 0,\n    transparent: true,\n    opacity: 0.7,\n    side: THREE.DoubleSide,\n  });\n  \n  const separator = new THREE.Mesh(separatorGeometry, separatorMaterial);\n  separator.rotation.y = Math.PI / 2;\n  group.add(separator);\n\n  // Electrodes\n  const electrodeGeometry = new THREE.PlaneGeometry(0.8, 1.2);\n  const electrodeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x1a1a1a,\n    roughness: 0.9,\n    metalness: 0.1,\n    side: THREE.DoubleSide,\n  });\n\n  const anode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n  anode.position.set(-0.4, 0, 0);\n  anode.rotation.y = Math.PI / 2;\n  group.add(anode);\n\n  const cathode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n  cathode.position.set(0.4, 0, 0);\n  cathode.rotation.y = Math.PI / 2;\n  group.add(cathode);\n\n  return group;\n}","/**\n * Mason Jar MFC model\n * Laboratory-scale glass container system\n */\n\nexport function createMasonJar(THREE: any) {\n  const group = new THREE.Group();\n\n  // Glass jar\n  const jarGeometry = new THREE.CylinderGeometry(0.8, 0.8, 2, 32);\n  const jarMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0xffffff,\n    metalness: 0,\n    roughness: 0.1,\n    transparent: true,\n    opacity: 0.8,\n    clearcoat: 1,\n    clearcoatRoughness: 0,\n  });\n  \n  const jar = new THREE.Mesh(jarGeometry, jarMaterial);\n  jar.castShadow = true;\n  jar.receiveShadow = true;\n  group.add(jar);\n\n  // Metal lid\n  const lidGeometry = new THREE.CylinderGeometry(0.85, 0.85, 0.1, 32);\n  const lidMaterial = new THREE.MeshStandardMaterial({\n    color: 0xc0c0c0,\n    metalness: 0.8,\n    roughness: 0.3,\n  });\n  \n  const lid = new THREE.Mesh(lidGeometry, lidMaterial);\n  lid.position.y = 1.05;\n  group.add(lid);\n\n  // Electrodes\n  const electrodeGeometry = new THREE.CylinderGeometry(0.02, 0.02, 1.5);\n  const electrodeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x1a1a1a,\n    roughness: 0.8,\n    metalness: 0.2,\n  });\n\n  const anode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n  anode.position.set(-0.3, 0, 0);\n  group.add(anode);\n\n  const cathode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n  cathode.position.set(0.3, 0, 0);\n  group.add(cathode);\n\n  // Substrate/water\n  const substrateGeometry = new THREE.CylinderGeometry(0.75, 0.75, 1.5, 32);\n  const substrateMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x8b4513,\n    transparent: true,\n    opacity: 0.6,\n    roughness: 0.8,\n    metalness: 0,\n  });\n  \n  const substrate = new THREE.Mesh(substrateGeometry, substrateMaterial);\n  substrate.position.y = -0.25;\n  group.add(substrate);\n\n  return group;\n}","/**\n * 3D Printed MFC model\n * Customizable rapid prototype design\n */\n\nexport function create3DPrinted(THREE: any) {\n  const group = new THREE.Group();\n\n  // Main chamber with complex geometry\n  const shape = new THREE.Shape();\n  shape.moveTo(0, -1);\n  shape.lineTo(1, -1);\n  shape.lineTo(1, 1);\n  shape.lineTo(-1, 1);\n  shape.lineTo(-1, -1);\n  shape.lineTo(0, -1);\n\n  const extrudeSettings = {\n    depth: 2,\n    bevelEnabled: true,\n    bevelThickness: 0.1,\n    bevelSize: 0.1,\n    bevelSegments: 10,\n  };\n\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n  const material = new THREE.MeshStandardMaterial({\n    color: 0x4169e1,\n    roughness: 0.4,\n    metalness: 0.2,\n  });\n\n  const chamber = new THREE.Mesh(geometry, material);\n  chamber.rotation.x = Math.PI / 2;\n  chamber.castShadow = true;\n  chamber.receiveShadow = true;\n  group.add(chamber);\n\n  return group;\n}","/**\n * Constructed Wetland MFC model\n * Nature-based wastewater treatment system\n */\n\nexport function createWetland(THREE: any) {\n  const group = new THREE.Group();\n\n  // Simple terrain-like base\n  const geometry = new THREE.BoxGeometry(3, 0.5, 2);\n  const material = new THREE.MeshStandardMaterial({\n    color: 0x228b22,\n    roughness: 0.7,\n    metalness: 0,\n  });\n\n  const wetland = new THREE.Mesh(geometry, material);\n  wetland.castShadow = true;\n  wetland.receiveShadow = true;\n  group.add(wetland);\n\n  return group;\n}","/**\n * Micro-Chip MFC model\n * Miniaturized bioelectronic device\n */\n\nexport function createMicroChip(THREE: any) {\n  const group = new THREE.Group();\n\n  // Circuit board base\n  const boardGeometry = new THREE.BoxGeometry(1, 0.1, 1);\n  const boardMaterial = new THREE.MeshStandardMaterial({\n    color: 0x1e4d2b,\n    roughness: 0.6,\n    metalness: 0.1,\n  });\n\n  const board = new THREE.Mesh(boardGeometry, boardMaterial);\n  board.castShadow = true;\n  board.receiveShadow = true;\n  group.add(board);\n\n  // Chip\n  const chipGeometry = new THREE.BoxGeometry(0.3, 0.05, 0.3);\n  const chipMaterial = new THREE.MeshStandardMaterial({\n    color: 0x696969,\n    roughness: 0.2,\n    metalness: 0.6,\n    emissive: 0x00ff00,\n    emissiveIntensity: 0.1,\n  });\n\n  const chip = new THREE.Mesh(chipGeometry, chipMaterial);\n  chip.position.y = 0.08;\n  group.add(chip);\n\n  return group;\n}","/**\n * Isolinear Chip MFC model\n * Advanced optical biocomputing system\n */\n\nexport function createIsolinearChip(THREE: any) {\n  const group = new THREE.Group();\n\n  // Crystal-like chip\n  const geometry = new THREE.OctahedronGeometry(0.5, 0);\n  const material = new THREE.MeshPhysicalMaterial({\n    color: 0x9370db,\n    metalness: 0.4,\n    roughness: 0.1,\n    emissive: 0x9370db,\n    emissiveIntensity: 0.3,\n    clearcoat: 1,\n    clearcoatRoughness: 0,\n  });\n\n  const chip = new THREE.Mesh(geometry, material);\n  chip.castShadow = true;\n  chip.receiveShadow = true;\n  group.add(chip);\n\n  return group;\n}","/**\n * Benchtop Bioreactor model\n * Laboratory-scale controlled reactor\n */\n\nexport function createBenchtopBioreactor(THREE: any) {\n  const group = new THREE.Group();\n\n  // Main vessel\n  const vesselGeometry = new THREE.CylinderGeometry(1, 1, 2.5, 32);\n  const vesselMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0xc0c0c0,\n    metalness: 0.7,\n    roughness: 0.3,\n    clearcoat: 0.5,\n    clearcoatRoughness: 0.1,\n  });\n\n  const vessel = new THREE.Mesh(vesselGeometry, vesselMaterial);\n  vessel.castShadow = true;\n  vessel.receiveShadow = true;\n  group.add(vessel);\n\n  // Control panel\n  const panelGeometry = new THREE.BoxGeometry(0.3, 0.8, 0.1);\n  const panelMaterial = new THREE.MeshStandardMaterial({\n    color: 0x333333,\n    metalness: 0.5,\n    roughness: 0.4,\n  });\n\n  const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n  panel.position.set(1.2, 0, 0);\n  group.add(panel);\n\n  return group;\n}","/**\n * Wastewater Treatment Plant model\n * Industrial-scale treatment facility\n */\n\nexport function createWastewaterTreatment(THREE: any) {\n  const group = new THREE.Group();\n\n  // Treatment tank\n  const tankGeometry = new THREE.BoxGeometry(4, 1.5, 3);\n  const tankMaterial = new THREE.MeshStandardMaterial({\n    color: 0x4682b4,\n    metalness: 0.3,\n    roughness: 0.6,\n  });\n\n  const tank = new THREE.Mesh(tankGeometry, tankMaterial);\n  tank.castShadow = true;\n  tank.receiveShadow = true;\n  group.add(tank);\n\n  // Pipes\n  const pipeGeometry = new THREE.CylinderGeometry(0.2, 0.2, 2);\n  const pipeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x808080,\n    metalness: 0.6,\n    roughness: 0.4,\n  });\n\n  const pipe1 = new THREE.Mesh(pipeGeometry, pipeMaterial);\n  pipe1.position.set(-2.2, 0, 0);\n  pipe1.rotation.z = Math.PI / 2;\n  group.add(pipe1);\n\n  const pipe2 = new THREE.Mesh(pipeGeometry, pipeMaterial);\n  pipe2.position.set(2.2, 0, 0);\n  pipe2.rotation.z = Math.PI / 2;\n  group.add(pipe2);\n\n  return group;\n}","/**\n * Brewery Processing System model\n * Waste-to-energy brewery integration\n */\n\nexport function createBreweryProcessing(THREE: any) {\n  const group = new THREE.Group();\n\n  // Fermentation tank\n  const tankGeometry = new THREE.CylinderGeometry(1.2, 1.5, 3, 32);\n  const tankMaterial = new THREE.MeshStandardMaterial({\n    color: 0xdaa520,\n    metalness: 0.5,\n    roughness: 0.4,\n  });\n\n  const tank = new THREE.Mesh(tankGeometry, tankMaterial);\n  tank.castShadow = true;\n  tank.receiveShadow = true;\n  group.add(tank);\n\n  // Top dome\n  const domeGeometry = new THREE.SphereGeometry(1.2, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2);\n  const dome = new THREE.Mesh(domeGeometry, tankMaterial);\n  dome.position.y = 1.5;\n  group.add(dome);\n\n  return group;\n}","/**\n * Architectural Facade model\n * Building-integrated bioelectrochemical system\n */\n\nexport function createArchitecturalFacade(THREE: any) {\n  const group = new THREE.Group();\n\n  // Building facade panel\n  const panelGeometry = new THREE.BoxGeometry(4, 6, 0.3);\n  const panelMaterial = new THREE.MeshStandardMaterial({\n    color: 0x708090,\n    metalness: 0.8,\n    roughness: 0.2,\n  });\n\n  const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n  panel.castShadow = true;\n  panel.receiveShadow = true;\n  group.add(panel);\n\n  // Integrated MFC modules\n  const moduleGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.2);\n  const moduleMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x2f4f4f,\n    metalness: 0.6,\n    roughness: 0.3,\n    clearcoat: 0.5,\n    clearcoatRoughness: 0.1,\n  });\n\n  for (let x = -1.5; x <= 1.5; x += 1) {\n    for (let y = -2.5; y <= 2.5; y += 1) {\n      const module = new THREE.Mesh(moduleGeometry, moduleMaterial);\n      module.position.set(x, y, 0.25);\n      group.add(module);\n    }\n  }\n\n  return group;\n}","/**\n * Benthic Fuel Cell model\n * Sediment-based marine power system\n */\n\nexport function createBenthicFuelCell(THREE: any) {\n  const group = new THREE.Group();\n\n  // Sediment layer\n  const sedimentGeometry = new THREE.BoxGeometry(3, 0.8, 3);\n  const sedimentMaterial = new THREE.MeshStandardMaterial({\n    color: 0x2f4f4f,\n    roughness: 0.8,\n    metalness: 0.1,\n  });\n\n  const sediment = new THREE.Mesh(sedimentGeometry, sedimentMaterial);\n  sediment.position.y = -0.4;\n  sediment.castShadow = true;\n  sediment.receiveShadow = true;\n  group.add(sediment);\n\n  // Water layer\n  const waterGeometry = new THREE.BoxGeometry(3, 1.5, 3);\n  const waterMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x4682b4,\n    transparent: true,\n    opacity: 0.4,\n    roughness: 0,\n    metalness: 0,\n    clearcoat: 1,\n    clearcoatRoughness: 0,\n  });\n\n  const water = new THREE.Mesh(waterGeometry, waterMaterial);\n  water.position.y = 0.75;\n  group.add(water);\n\n  // Electrode array\n  const electrodeGeometry = new THREE.CylinderGeometry(0.05, 0.05, 2);\n  const electrodeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x1a1a1a,\n    metalness: 0.3,\n    roughness: 0.6,\n  });\n\n  for (let x = -1; x <= 1; x += 0.5) {\n    for (let z = -1; z <= 1; z += 0.5) {\n      const electrode = new THREE.Mesh(electrodeGeometry, electrodeMaterial);\n      electrode.position.set(x, 0, z);\n      group.add(electrode);\n    }\n  }\n\n  return group;\n}","/**\n * Kitchen Sink System model\n * Domestic waste-to-energy converter\n */\n\nexport function createKitchenSink(THREE: any) {\n  const group = new THREE.Group();\n\n  // Sink basin\n  const sinkShape = new THREE.Shape();\n  sinkShape.moveTo(-1, -0.5);\n  sinkShape.lineTo(1, -0.5);\n  sinkShape.lineTo(1, 0.5);\n  sinkShape.lineTo(-1, 0.5);\n  sinkShape.lineTo(-1, -0.5);\n\n  const sinkGeometry = new THREE.ExtrudeGeometry(sinkShape, {\n    depth: 0.8,\n    bevelEnabled: true,\n    bevelThickness: 0.05,\n    bevelSize: 0.05,\n    bevelSegments: 10,\n  });\n\n  const sinkMaterial = new THREE.MeshStandardMaterial({\n    color: 0xf5f5dc,\n    metalness: 0.6,\n    roughness: 0.3,\n  });\n\n  const sink = new THREE.Mesh(sinkGeometry, sinkMaterial);\n  sink.rotation.x = Math.PI / 2;\n  sink.castShadow = true;\n  sink.receiveShadow = true;\n  group.add(sink);\n\n  // MFC module underneath\n  const mfcGeometry = new THREE.BoxGeometry(1.5, 0.3, 0.6);\n  const mfcMaterial = new THREE.MeshStandardMaterial({\n    color: 0x333333,\n    metalness: 0.4,\n    roughness: 0.6,\n  });\n\n  const mfc = new THREE.Mesh(mfcGeometry, mfcMaterial);\n  mfc.position.y = -0.65;\n  group.add(mfc);\n\n  return group;\n}","/**\n * Model definitions for all MESSAi 3D designs\n */\n\nimport { ModelDefinition, DesignType } from '../types';\n\n// Import individual model builders\nimport { createEarthenPot } from './earthen-pot';\nimport { createCardboard } from './cardboard';\nimport { createMasonJar } from './mason-jar';\nimport { create3DPrinted } from './3d-printed';\nimport { createWetland } from './wetland';\nimport { createMicroChip } from './micro-chip';\nimport { createIsolinearChip } from './isolinear-chip';\nimport { createBenchtopBioreactor } from './benchtop-bioreactor';\nimport { createWastewaterTreatment } from './wastewater-treatment';\nimport { createBreweryProcessing } from './brewery-processing';\nimport { createArchitecturalFacade } from './architectural-facade';\nimport { createBenthicFuelCell } from './benthic-fuel-cell';\nimport { createKitchenSink } from './kitchen-sink';\n\n/**\n * Complete model library for MESSAi\n */\nexport const modelDefinitions: Record<DesignType, ModelDefinition> = {\n  'earthen-pot': {\n    id: 'earthen-pot',\n    name: 'Earthen Pot MFC',\n    description: 'Traditional clay pot design for rural applications',\n    color: 0xcc6633,\n    scale: 1,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createEarthenPot,\n    materialProps: {\n      metalness: 0,\n      roughness: 0.9,\n    },\n  },\n\n  'cardboard': {\n    id: 'cardboard',\n    name: 'Cardboard MFC',\n    description: 'Low-cost educational prototype',\n    color: 0xd4a574,\n    scale: 1,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createCardboard,\n    materialProps: {\n      metalness: 0,\n      roughness: 0.8,\n    },\n  },\n\n  'mason-jar': {\n    id: 'mason-jar',\n    name: 'Mason Jar MFC',\n    description: 'Laboratory-scale glass container system',\n    color: 0xf0f0f0,\n    scale: 1,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createMasonJar,\n    materialProps: {\n      metalness: 0,\n      roughness: 0.1,\n      transparent: true,\n      opacity: 0.8,\n    },\n  },\n\n  '3d-printed': {\n    id: '3d-printed',\n    name: '3D Printed MFC',\n    description: 'Customizable rapid prototype design',\n    color: 0x4169e1,\n    scale: 1,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: create3DPrinted,\n    materialProps: {\n      metalness: 0.2,\n      roughness: 0.4,\n    },\n  },\n\n  'wetland': {\n    id: 'wetland',\n    name: 'Constructed Wetland MFC',\n    description: 'Nature-based wastewater treatment system',\n    color: 0x228b22,\n    scale: 1.5,\n    rotation: [0, 0, 0],\n    position: [0, -0.5, 0],\n    createGeometry: createWetland,\n    materialProps: {\n      metalness: 0,\n      roughness: 0.7,\n    },\n  },\n\n  'micro-chip': {\n    id: 'micro-chip',\n    name: 'Micro-Chip MFC',\n    description: 'Miniaturized bioelectronic device',\n    color: 0x696969,\n    emissiveColor: 0x00ff00,\n    scale: 0.5,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createMicroChip,\n    materialProps: {\n      metalness: 0.6,\n      roughness: 0.2,\n    },\n    animation: {\n      type: 'pulse',\n      speed: 2,\n      amplitude: 0.05,\n    },\n  },\n\n  'isolinear-chip': {\n    id: 'isolinear-chip',\n    name: 'Isolinear Chip MFC',\n    description: 'Advanced optical biocomputing system',\n    color: 0x9370db,\n    emissiveColor: 0x9370db,\n    scale: 0.6,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createIsolinearChip,\n    materialProps: {\n      metalness: 0.4,\n      roughness: 0.1,\n      emissiveIntensity: 0.3,\n    },\n    animation: {\n      type: 'rotate',\n      speed: 0.5,\n    },\n  },\n\n  'benchtop-bioreactor': {\n    id: 'benchtop-bioreactor',\n    name: 'Benchtop Bioreactor',\n    description: 'Laboratory-scale controlled reactor',\n    color: 0xc0c0c0,\n    scale: 1.2,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createBenchtopBioreactor,\n    materialProps: {\n      metalness: 0.7,\n      roughness: 0.3,\n    },\n  },\n\n  'wastewater-treatment': {\n    id: 'wastewater-treatment',\n    name: 'Wastewater Treatment Plant',\n    description: 'Industrial-scale treatment facility',\n    color: 0x4682b4,\n    scale: 2,\n    rotation: [0, 0, 0],\n    position: [0, -1, 0],\n    createGeometry: createWastewaterTreatment,\n    materialProps: {\n      metalness: 0.3,\n      roughness: 0.6,\n    },\n  },\n\n  'brewery-processing': {\n    id: 'brewery-processing',\n    name: 'Brewery Processing System',\n    description: 'Waste-to-energy brewery integration',\n    color: 0xdaa520,\n    scale: 1.5,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createBreweryProcessing,\n    materialProps: {\n      metalness: 0.5,\n      roughness: 0.4,\n    },\n  },\n\n  'architectural-facade': {\n    id: 'architectural-facade',\n    name: 'Architectural Facade',\n    description: 'Building-integrated bioelectrochemical system',\n    color: 0x708090,\n    scale: 2.5,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createArchitecturalFacade,\n    materialProps: {\n      metalness: 0.8,\n      roughness: 0.2,\n    },\n  },\n\n  'benthic-fuel-cell': {\n    id: 'benthic-fuel-cell',\n    name: 'Benthic Fuel Cell',\n    description: 'Sediment-based marine power system',\n    color: 0x2f4f4f,\n    scale: 1.8,\n    rotation: [0, 0, 0],\n    position: [0, -0.8, 0],\n    createGeometry: createBenthicFuelCell,\n    materialProps: {\n      metalness: 0.1,\n      roughness: 0.8,\n    },\n  },\n\n  'kitchen-sink': {\n    id: 'kitchen-sink',\n    name: 'Kitchen Sink System',\n    description: 'Domestic waste-to-energy converter',\n    color: 0xf5f5dc,\n    scale: 1,\n    rotation: [0, 0, 0],\n    position: [0, 0, 0],\n    createGeometry: createKitchenSink,\n    materialProps: {\n      metalness: 0.6,\n      roughness: 0.3,\n    },\n  },\n};","/**\n * Shared materials for MESSAi 3D models\n */\n\nimport { Material } from '../../types';\n\n/**\n * Create material based on configuration\n */\nexport function createMaterial(THREE: any, config: Material): any {\n  const baseProps = {\n    color: config.color,\n    transparent: config.transparent || false,\n    opacity: config.opacity || 1,\n  };\n\n  switch (config.type) {\n    case 'physical':\n      return new THREE.MeshPhysicalMaterial({\n        ...baseProps,\n        metalness: config.metalness || 0,\n        roughness: config.roughness || 0.5,\n        emissive: config.emissive || 0x000000,\n        emissiveIntensity: config.emissiveIntensity || 0,\n        clearcoat: 0.3,\n        clearcoatRoughness: 0.2,\n      });\n\n    case 'standard':\n      return new THREE.MeshStandardMaterial({\n        ...baseProps,\n        metalness: config.metalness || 0,\n        roughness: config.roughness || 0.5,\n        emissive: config.emissive || 0x000000,\n        emissiveIntensity: config.emissiveIntensity || 0,\n      });\n\n    case 'basic':\n    default:\n      return new THREE.MeshBasicMaterial(baseProps);\n  }\n}\n\n/**\n * Predefined materials for common MFC components\n */\nexport const materialLibrary = {\n  // Electrode materials\n  carbonCloth: {\n    name: 'Carbon Cloth',\n    type: 'standard' as const,\n    color: 0x1a1a1a,\n    metalness: 0.1,\n    roughness: 0.8,\n    emissive: 0x111111,\n    emissiveIntensity: 0.1,\n  },\n\n  graphite: {\n    name: 'Graphite',\n    type: 'standard' as const,\n    color: 0x2a2a2a,\n    metalness: 0.3,\n    roughness: 0.4,\n    emissive: 0x222222,\n    emissiveIntensity: 0.05,\n  },\n\n  stainlessSteel: {\n    name: 'Stainless Steel',\n    type: 'physical' as const,\n    color: 0xc0c0c0,\n    metalness: 0.9,\n    roughness: 0.2,\n  },\n\n  // Container materials\n  earthenware: {\n    name: 'Earthenware',\n    type: 'standard' as const,\n    color: 0xcc6633,\n    metalness: 0,\n    roughness: 0.9,\n  },\n\n  glass: {\n    name: 'Glass',\n    type: 'physical' as const,\n    color: 0xffffff,\n    metalness: 0,\n    roughness: 0.1,\n    transparent: true,\n    opacity: 0.8,\n  },\n\n  plastic: {\n    name: 'Plastic',\n    type: 'standard' as const,\n    color: 0xf0f0f0,\n    metalness: 0,\n    roughness: 0.5,\n  },\n\n  acrylic: {\n    name: 'Acrylic',\n    type: 'physical' as const,\n    color: 0xffffff,\n    metalness: 0,\n    roughness: 0.1,\n    transparent: true,\n    opacity: 0.9,\n  },\n\n  // Special materials\n  membrane: {\n    name: 'Proton Exchange Membrane',\n    type: 'physical' as const,\n    color: 0xffe4b5,\n    metalness: 0,\n    roughness: 0.6,\n    transparent: true,\n    opacity: 0.7,\n  },\n\n  biofilm: {\n    name: 'Biofilm',\n    type: 'physical' as const,\n    color: 0x90ee90,\n    metalness: 0,\n    roughness: 0.8,\n    transparent: true,\n    opacity: 0.6,\n    emissive: 0x90ee90,\n    emissiveIntensity: 0.1,\n  },\n\n  water: {\n    name: 'Water/Electrolyte',\n    type: 'physical' as const,\n    color: 0x4682b4,\n    metalness: 0,\n    roughness: 0,\n    transparent: true,\n    opacity: 0.5,\n  },\n\n  // Circuit materials\n  copper: {\n    name: 'Copper Wire',\n    type: 'physical' as const,\n    color: 0xb87333,\n    metalness: 0.8,\n    roughness: 0.3,\n  },\n\n  circuitBoard: {\n    name: 'Circuit Board',\n    type: 'standard' as const,\n    color: 0x1e4d2b,\n    metalness: 0.1,\n    roughness: 0.6,\n  },\n\n  silicon: {\n    name: 'Silicon Chip',\n    type: 'physical' as const,\n    color: 0x696969,\n    metalness: 0.4,\n    roughness: 0.2,\n  },\n};\n\n/**\n * Get material by name\n */\nexport function getMaterial(THREE: any, name: keyof typeof materialLibrary): any {\n  const config = materialLibrary[name];\n  if (!config) {\n    console.warn(`Material '${name}' not found, using default`);\n    return new THREE.MeshStandardMaterial({ color: 0x808080 });\n  }\n  return createMaterial(THREE, config);\n}\n\n/**\n * Create gradient material\n */\nexport function createGradientMaterial(\n  THREE: any, \n  color1: number, \n  color2: number, \n  direction: 'vertical' | 'horizontal' = 'vertical'\n): any {\n  const canvas = document.createElement('canvas');\n  canvas.width = 128;\n  canvas.height = 128;\n  const context = canvas.getContext('2d')!;\n\n  const gradient = direction === 'vertical' \n    ? context.createLinearGradient(0, 0, 0, 128)\n    : context.createLinearGradient(0, 0, 128, 0);\n\n  const c1 = new THREE.Color(color1);\n  const c2 = new THREE.Color(color2);\n\n  gradient.addColorStop(0, `#${c1.getHexString()}`);\n  gradient.addColorStop(1, `#${c2.getHexString()}`);\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, 128, 128);\n\n  const texture = new THREE.CanvasTexture(canvas);\n  texture.needsUpdate = true;\n\n  return new THREE.MeshStandardMaterial({\n    map: texture,\n    metalness: 0.1,\n    roughness: 0.5,\n  });\n}","'use client';\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { loadThree, loadOrbitControls } from './utils/loader';\nimport { checkWebGLSupport, getWebGLCapabilities, getQualitySettings } from './utils/webgl';\nimport { PerformanceMonitor, AdaptiveQuality, disposeObject } from './utils/performance';\nimport { rendererPool } from './utils/renderer-pool';\nimport { MESSModel3DProps, ThreeContext } from './types';\nimport { modelDefinitions } from './models';\nimport { createMaterial } from './models/shared/materials';\n\n// Generate unique ID for each component instance\nlet instanceCounter = 0;\n\n/**\n * Main 3D model component for MESSAi\n * Consolidates all 3D rendering functionality\n */\nexport function MESSModel3D({\n  design,\n  interactive = true,\n  showGrid = false,\n  autoRotate = false,\n  rotationSpeed = 0.01,\n  className = '',\n  onLoad,\n  onError,\n  onClick,\n  showLabels = false,\n  performanceMode = false,\n}: MESSModel3DProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const contextRef = useRef<ThreeContext | null>(null);\n  const animationIdRef = useRef<number | null>(null);\n  const performanceRef = useRef<PerformanceMonitor | null>(null);\n  const qualityRef = useRef<AdaptiveQuality | null>(null);\n  const instanceId = useRef(`mess-3d-${++instanceCounter}`);\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [webglSupported, setWebglSupported] = useState(true);\n\n  // Initialize Three.js scene\n  const initScene = useCallback(async () => {\n    if (!mountRef.current) return;\n\n    try {\n      // Check WebGL support\n      if (!checkWebGLSupport()) {\n        throw new Error('WebGL is not supported on this device');\n      }\n\n      // Load Three.js\n      const THREE = await loadThree();\n      \n      // Get quality settings\n      const capabilities = getWebGLCapabilities();\n      const qualitySettings = getQualitySettings(capabilities);\n      \n      if (!qualitySettings) {\n        throw new Error('Unable to determine quality settings');\n      }\n\n      // Initialize performance monitoring\n      performanceRef.current = new PerformanceMonitor();\n      qualityRef.current = new AdaptiveQuality(\n        performanceRef.current,\n        performanceMode ? 'low' : qualitySettings.quality as 'low' | 'medium' | 'high'\n      );\n\n      // Scene setup\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x0a0a0a);\n      \n      // Camera setup\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        mountRef.current.clientWidth / mountRef.current.clientHeight,\n        0.1,\n        1000\n      );\n      camera.position.set(5, 5, 5);\n\n      // Get renderer from pool\n      const currentQuality = qualityRef.current.getQualitySettings();\n      const { renderer, canvas, isNew } = await rendererPool.getRenderer(\n        instanceId.current,\n        mountRef.current,\n        THREE,\n        {\n          antialias: currentQuality.antialias,\n          alpha: true,\n          powerPreference: performanceMode ? 'low-power' : 'high-performance',\n          pixelRatio: currentQuality.pixelRatio,\n        }\n      );\n\n      // Update renderer size\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.shadowMap.enabled = currentQuality.shadowsEnabled;\n\n      // Controls setup\n      let controls: any = null;\n      if (interactive) {\n        const OrbitControls = await loadOrbitControls(THREE);\n        controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n        controls.enableZoom = true;\n        controls.enablePan = true;\n        controls.autoRotate = autoRotate;\n        controls.autoRotateSpeed = rotationSpeed * 60;\n      }\n\n      // Lighting setup\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(10, 10, 5);\n      directionalLight.castShadow = currentQuality.shadowsEnabled;\n      if (directionalLight.shadow) {\n        directionalLight.shadow.mapSize.width = currentQuality.shadowMapSize;\n        directionalLight.shadow.mapSize.height = currentQuality.shadowMapSize;\n      }\n      scene.add(directionalLight);\n\n      // Grid helper\n      if (showGrid) {\n        const gridHelper = new THREE.GridHelper(10, 10, 0x444444, 0x222222);\n        scene.add(gridHelper);\n      }\n\n      // Store context\n      contextRef.current = {\n        scene,\n        camera,\n        renderer,\n        controls,\n      };\n\n      // Load model\n      await loadModel(THREE, scene);\n\n      // Handle clicks\n      if (onClick && canvas) {\n        canvas.addEventListener('click', handleClick);\n      }\n\n      // Start render loop\n      animate();\n\n      setIsLoading(false);\n      onLoad?.();\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to initialize 3D scene');\n      setError(error);\n      setWebglSupported(checkWebGLSupport());\n      onError?.(error);\n      console.error('MESSModel3D initialization error:', error);\n    }\n  }, [design, interactive, showGrid, autoRotate, rotationSpeed, onClick, onLoad, onError, performanceMode]);\n\n  // Load model geometry\n  const loadModel = useCallback(async (THREE: any, scene: any) => {\n    const modelDef = modelDefinitions[design];\n    if (!modelDef) {\n      throw new Error(`Unknown design type: ${design}`);\n    }\n\n    // Create model group\n    const modelGroup = new THREE.Group();\n    \n    // Apply transformations\n    if (modelDef.position) {\n      modelGroup.position.set(...modelDef.position);\n    }\n    if (modelDef.rotation) {\n      modelGroup.rotation.set(...modelDef.rotation);\n    }\n    if (modelDef.scale) {\n      modelGroup.scale.setScalar(modelDef.scale);\n    }\n\n    try {\n      // Create geometry\n      let geometry: any;\n      if (modelDef.createGeometry) {\n        geometry = await modelDef.createGeometry(THREE);\n      } else {\n        // Default to a box if no custom geometry\n        geometry = new THREE.BoxGeometry(2, 2, 2);\n      }\n\n      // Ensure geometry is valid\n      if (!geometry || !geometry.attributes) {\n        console.warn(`Invalid geometry for ${design}, using default box`);\n        geometry = new THREE.BoxGeometry(2, 2, 2);\n      }\n\n      // Create material with safe defaults\n      const materialConfig = {\n        name: modelDef.name,\n        type: (modelDef.materialProps?.type || 'standard') as 'physical' | 'standard' | 'basic',\n        color: modelDef.color || 0x808080,\n        metalness: modelDef.materialProps?.metalness ?? 0.5,\n        roughness: modelDef.materialProps?.roughness ?? 0.5,\n        transparent: modelDef.materialProps?.transparent ?? false,\n        opacity: modelDef.materialProps?.opacity ?? 1,\n        emissive: modelDef.emissiveColor || 0x000000,\n        emissiveIntensity: 0.1,\n      };\n\n      const material = createMaterial(THREE, materialConfig);\n\n      // Create mesh with error handling\n      let mesh;\n      try {\n        mesh = new THREE.Mesh(geometry, material);\n      } catch (meshError) {\n        console.error('Error creating mesh, using basic material:', meshError);\n        const basicMaterial = new THREE.MeshBasicMaterial({ color: modelDef.color || 0x808080 });\n        mesh = new THREE.Mesh(geometry, basicMaterial);\n      }\n\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.name = design;\n\n      // Add animation if specified\n      if (modelDef.animation) {\n        mesh.userData.animation = modelDef.animation;\n      }\n\n      modelGroup.add(mesh);\n      scene.add(modelGroup);\n\n    } catch (modelError) {\n      console.error(`Error creating model ${design}:`, modelError);\n      // Add a fallback cube\n      const fallbackGeometry = new THREE.BoxGeometry(2, 2, 2);\n      const fallbackMaterial = new THREE.MeshBasicMaterial({ \n        color: 0xff0000,\n        wireframe: true \n      });\n      const fallbackMesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);\n      modelGroup.add(fallbackMesh);\n      scene.add(modelGroup);\n    }\n  }, [design, showLabels]);\n\n  // Handle click events\n  const handleClick = useCallback((event: MouseEvent) => {\n    if (!contextRef.current || !onClick) return;\n\n    const { camera, renderer, scene } = contextRef.current;\n    const THREE = (window as any).THREE;\n    if (!THREE) return;\n\n    // Calculate mouse position in normalized device coordinates\n    const rect = (event.target as HTMLElement).getBoundingClientRect();\n    const mouse = new THREE.Vector2(\n      ((event.clientX - rect.left) / rect.width) * 2 - 1,\n      -((event.clientY - rect.top) / rect.height) * 2 + 1\n    );\n\n    // Raycasting\n    const raycaster = new THREE.Raycaster();\n    raycaster.setFromCamera(mouse, camera);\n    \n    const intersects = raycaster.intersectObjects(scene.children, true);\n    if (intersects.length > 0) {\n      const object = intersects[0].object;\n      onClick(object.name || undefined);\n    }\n  }, [onClick]);\n\n  // Animation loop\n  const animate = useCallback(() => {\n    if (!contextRef.current) return;\n\n    const { scene, camera, renderer, controls } = contextRef.current;\n\n    // Update performance monitor\n    performanceRef.current?.update();\n    performanceRef.current?.updateMemoryUsage(renderer);\n\n    // Update adaptive quality\n    qualityRef.current?.update();\n\n    // Apply quality settings if changed\n    const currentQuality = qualityRef.current?.getQualitySettings();\n    if (currentQuality && renderer.getPixelRatio() !== currentQuality.pixelRatio) {\n      renderer.setPixelRatio(currentQuality.pixelRatio);\n    }\n\n    // Update controls\n    if (controls) {\n      controls.update();\n    }\n\n    // Animate models\n    scene.traverse((child: any) => {\n      if (child.userData.animation) {\n        const time = performance.now() * 0.001;\n        const anim = child.userData.animation;\n        \n        switch (anim.type) {\n          case 'rotate':\n            child.rotation.y = time * (anim.speed || 1);\n            break;\n          case 'float':\n            child.position.y = Math.sin(time * (anim.speed || 1)) * (anim.amplitude || 0.1);\n            break;\n          case 'pulse':\n            const scale = 1 + Math.sin(time * (anim.speed || 1)) * (anim.amplitude || 0.05);\n            child.scale.setScalar(scale);\n            break;\n        }\n      }\n    });\n\n    // Render\n    renderer.render(scene, camera);\n    \n    // Continue animation\n    animationIdRef.current = requestAnimationFrame(animate);\n  }, []);\n\n  // Handle resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (!contextRef.current || !mountRef.current) return;\n      \n      const { camera, renderer } = contextRef.current;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Initialize scene\n  useEffect(() => {\n    initScene();\n\n    // Cleanup\n    return () => {\n      // Cancel animation\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      \n      // Clean up Three.js objects\n      if (contextRef.current) {\n        const { scene, controls } = contextRef.current;\n        \n        // Dispose controls\n        if (controls && controls.dispose) {\n          controls.dispose();\n        }\n        \n        // Dispose scene objects\n        scene.traverse((child: any) => {\n          disposeObject(child);\n        });\n        scene.clear();\n      }\n      \n      // Release renderer from pool\n      rendererPool.releaseRenderer(instanceId.current);\n    };\n  }, [initScene]);\n\n  // Render states\n  if (!webglSupported) {\n    return (\n      <div className={`flex items-center justify-center h-full bg-gray-900 rounded-lg p-8 ${className}`}>\n        <div className=\"text-center\">\n          <p className=\"text-red-500 mb-2\">WebGL is not supported on your device</p>\n          <p className=\"text-sm text-gray-400\">\n            Please use a modern browser with WebGL support to view 3D models.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`flex items-center justify-center h-full bg-gray-900 rounded-lg p-8 ${className}`}>\n        <div className=\"text-center\">\n          <p className=\"text-red-500 mb-2\">Failed to load 3D model</p>\n          <p className=\"text-sm text-gray-400\">{error.message}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative w-full h-full bg-gray-900 rounded-lg overflow-hidden ${className}`}>\n      <div ref={mountRef} className=\"w-full h-full\" />\n      \n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-900 bg-opacity-90\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mb-4\" />\n            <p className=\"text-gray-400\">Loading 3D model...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Performance indicator (dev mode only) */}\n      {process.env.NODE_ENV === 'development' && performanceRef.current && (\n        <div className=\"absolute top-2 left-2 bg-black bg-opacity-50 px-2 py-1 rounded text-xs text-white\">\n          FPS: {performanceRef.current.getFPS()}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Export as default for lazy loading\nexport default MESSModel3D;","'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { MESSModel3DProps } from './types';\n\n/**\n * Lightweight 3D model component that uses CSS 3D transforms\n * Used in galleries to avoid WebGL context limits\n */\nexport function MESSModel3DLite({\n  design,\n  className = '',\n  autoRotate = true,\n  rotationSpeed = 0.01,\n}: Pick<MESSModel3DProps, 'design' | 'className' | 'autoRotate' | 'rotationSpeed'>) {\n  const [rotation, setRotation] = useState({ x: -20, y: 45 });\n  const animationRef = useRef<number>();\n\n  useEffect(() => {\n    if (!autoRotate) return;\n\n    const animate = () => {\n      setRotation(prev => ({\n        x: prev.x,\n        y: prev.y + rotationSpeed * 60\n      }));\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animationRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [autoRotate, rotationSpeed]);\n\n  // Design-specific 3D CSS models\n  const getDesignElement = () => {\n    const baseStyle = {\n      transform: `rotateX(${rotation.x}deg) rotateY(${rotation.y}deg)`,\n      transformStyle: 'preserve-3d' as const,\n      transition: autoRotate ? 'none' : 'transform 0.3s ease',\n    };\n\n    switch (design) {\n      case 'earthen-pot':\n        return (\n          <div className=\"relative w-32 h-32\" style={baseStyle}>\n            <div className=\"absolute inset-0 bg-orange-700 rounded-full\" \n                 style={{ \n                   clipPath: 'polygon(20% 0%, 80% 0%, 100% 70%, 90% 100%, 10% 100%, 0% 70%)',\n                   background: 'linear-gradient(135deg, #cc6633 0%, #8b4513 100%)'\n                 }} />\n            <div className=\"absolute inset-4 bg-gray-900 rounded-full opacity-50\" />\n          </div>\n        );\n\n      case 'mason-jar':\n        return (\n          <div className=\"relative w-24 h-32\" style={baseStyle}>\n            <div className=\"absolute inset-0 bg-blue-100 rounded-lg border-2 border-gray-300\"\n                 style={{ \n                   background: 'linear-gradient(180deg, rgba(255,255,255,0.8) 0%, rgba(200,200,255,0.6) 100%)'\n                 }} />\n            <div className=\"absolute top-0 inset-x-0 h-4 bg-gray-400 rounded-t-lg\" />\n            <div className=\"absolute bottom-4 inset-x-2 h-16 bg-yellow-700 opacity-30 rounded\" />\n          </div>\n        );\n\n      case 'micro-chip':\n        return (\n          <div className=\"relative w-20 h-20\" style={baseStyle}>\n            <div className=\"absolute inset-0 bg-green-900 rounded\"\n                 style={{ \n                   background: 'linear-gradient(45deg, #1e4d2b 0%, #2d5a3d 50%, #1e4d2b 100%)'\n                 }} />\n            <div className=\"absolute inset-2 bg-gray-700 rounded\">\n              <div className=\"absolute inset-1 bg-green-400 rounded animate-pulse\" />\n            </div>\n          </div>\n        );\n\n      case '3d-printed':\n        return (\n          <div className=\"relative w-28 h-28\" style={baseStyle}>\n            <div className=\"absolute inset-0\"\n                 style={{\n                   background: 'conic-gradient(from 45deg, #4169e1 0deg, #6495ed 60deg, #4169e1 120deg, #1e50a2 180deg, #4169e1 240deg, #6495ed 300deg, #4169e1 360deg)',\n                   clipPath: 'polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%)'\n                 }} />\n          </div>\n        );\n\n      case 'wetland':\n        return (\n          <div className=\"relative w-36 h-20\" style={baseStyle}>\n            <div className=\"absolute bottom-0 inset-x-0 h-12 bg-green-800 rounded\"\n                 style={{ \n                   background: 'linear-gradient(180deg, #228b22 0%, #0d4d0d 100%)'\n                 }} />\n            <div className=\"absolute bottom-8 left-4 w-2 h-12 bg-green-600 rounded-t-full\" />\n            <div className=\"absolute bottom-8 left-8 w-2 h-10 bg-green-600 rounded-t-full\" />\n            <div className=\"absolute bottom-8 right-4 w-2 h-14 bg-green-600 rounded-t-full\" />\n            <div className=\"absolute bottom-8 right-8 w-2 h-11 bg-green-600 rounded-t-full\" />\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"relative w-24 h-24\" style={baseStyle}>\n            <div className=\"absolute inset-0 bg-gray-600 rounded\"\n                 style={{ \n                   background: 'linear-gradient(135deg, #808080 0%, #404040 100%)'\n                 }} />\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className={`flex items-center justify-center h-full ${className}`} style={{ perspective: '1000px' }}>\n      <div className=\"text-xs text-red-500 absolute top-1 right-1 z-10\">\n        3D: {design}\n      </div>\n      {getDesignElement()}\n    </div>\n  );\n}\n\n// Add perspective utility to tailwind\nconst perspectiveStyle = `\n.perspective-1000 {\n  perspective: 1000px;\n}\n`;\n\nif (typeof document !== 'undefined' && !document.querySelector('#perspective-styles')) {\n  const style = document.createElement('style');\n  style.id = 'perspective-styles';\n  style.textContent = perspectiveStyle;\n  document.head.appendChild(style);\n}"]}