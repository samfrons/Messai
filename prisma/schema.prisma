generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  password           String?
  name               String?
  image              String?
  role               String              @default("USER")
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLoginAt        DateTime?
  institution        String?
  researchArea       String?
  bio                String?
  twoFactorEnabled   Boolean             @default(false)
  twoFactorSecret    String?
  accounts           Account[]
  experiments        Experiment[]
  loginAttempts      LoginAttempt[]
  passwordResets     PasswordReset[]
  sessions           Session[]
  profile            UserProfile?
  settings           UserSettings?
  verificationTokens VerificationToken[]

  @@index([email])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  userAgent String?
  success   Boolean
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model MFCDesign {
  id          String       @id @default(cuid())
  name        String
  type        String
  cost        String
  powerOutput String
  materials   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  experiments Experiment[]
}

model Experiment {
  id           String        @id @default(cuid())
  name         String
  userId       String
  designId     String
  status       String        @default("SETUP")
  parameters   String
  isPublic     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  design       MFCDesign     @relation(fields: [designId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  measurements Measurement[]

  @@index([userId])
  @@index([status])
}

model Measurement {
  id           String     @id @default(cuid())
  experimentId String
  voltage      Float
  current      Float
  power        Float
  temperature  Float
  ph           Float
  substrate    Float?
  notes        String?
  timestamp    DateTime   @default(now())
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId, timestamp])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expire    DateTime
  createdAt DateTime @default(now())

  @@index([key, expire])
}

model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  avatar              String?
  expertise           String?
  interests           String   @default("[]")
  publicProfile       Boolean  @default(false)
  completedOnboarding Boolean  @default(false)
  onboardingStep      Int      @default(0)
  linkedIn            String?
  orcid               String?
  googleScholar       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  experimentAlerts      Boolean  @default(true)
  collaborationRequests Boolean  @default(true)
  newsletter            Boolean  @default(false)
  theme                 String   @default("dark")
  units                 String   @default("metric")
  language              String   @default("en")
  dashboardLayout       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
